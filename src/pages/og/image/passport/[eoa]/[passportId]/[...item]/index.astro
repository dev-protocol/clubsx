---
import {
  whenDefined,
  whenDefinedAll,
  whenNotError,
  isNotError,
  type UndefinedOr,
} from '@devprotocol/util-ts'
import { getPassportItemForPayload } from '@fixtures/api/passportItem'
import { getProfile } from '@fixtures/api/profile'
import { hashToItem } from '@fixtures/router/passportItem'
import { Debug } from 'astro:components'
import '@devprotocol/clubs-core/styles'
import { isDark } from '@fixtures/color'
import { ClubsLogo } from '@devprotocol/clubs-core/layouts'
import Description from './components/Description.vue'
import VideoElement from './components/VideoElement.vue'
import type { Clip } from '@pages/api/profile'
import { markdownToHtml, ProseTextInherit } from '@devprotocol/clubs-core'

import playIconInnerHTML from './assets/play-icon.svg?raw'
import { MediaEmbed } from '@devprotocol/clubs-plugin-passports/vue'
import MediaSDKs from '@components/Passports/MediaSDKs.astro'
import { DefaultSkin } from '@constants/passports'
import { passportClass } from '@fixtures/ui/passport'
import ItemView from './components/ItemView.astro'
import { number } from 'astro:schema'

const { eoa, passportId, item: itemPath } = Astro.params

const profile = await whenDefined(eoa, (_eoa) => getProfile({ id: _eoa }))
const skin = whenDefinedAll([passportId, profile], ([id, prof]) =>
  prof.skins?.find((skin) => (skin as any).id === id),
)
const itemFromPath = whenDefined(itemPath, hashToItem)
const givenItem = whenDefinedAll([skin, itemFromPath], ([_skin, _item]) =>
  whenNotError(_item, ({ type, id }) =>
    _skin[type] instanceof Array
      ? (_skin[type].find((x: Clip) => x.id === id) as UndefinedOr<Clip>)
      : _skin[type],
  ),
)
const mode: 'item' | 'skin' = itemPath ? 'item' : 'skin'
const givenItemPayload = whenDefined(givenItem, (_item) =>
  whenNotError(_item, (__item) =>
    typeof __item === 'string' ? __item : __item.payload,
  ),
)
const [passportItemData, userProfile, passportSkinTheme] = await Promise.all([
  whenDefined(givenItemPayload, (_payload) =>
    whenNotError(_payload, (__payload) =>
      getPassportItemForPayload({ sTokenPayload: __payload }),
    ),
  ),
  whenDefined(eoa, (id) => getProfile({ id })),
  mode === 'skin'
    ? (whenDefinedAll([skin?.theme], ([payload]) =>
        getPassportItemForPayload({
          sTokenPayload: payload ?? '',
        })
          .then((item) => (item instanceof Error ? DefaultSkin : item))
          .catch(() => DefaultSkin),
      ) ?? DefaultSkin)
    : undefined,
])
const firstItem = whenDefined(
  skin,
  (_skin) => _skin.spotlight?.at(0) ?? _skin.clips?.at(0),
)
const passportLinkItem = whenNotError(givenItem, (item) =>
  item?.link ? (item as Clip) : new Error(),
)

const data = {
  user: userProfile,
  mode,
  item: isNotError(givenItem) ? givenItem : undefined,
  passportItem: isNotError(passportItemData) ? passportItemData : undefined,
  passportLinkItem: isNotError(passportLinkItem) ? passportLinkItem : undefined,
  profileDescription:
    mode === 'skin' && skin ? markdownToHtml(skin.description) : undefined,
  passportSkinTheme,
  numberItems: (skin?.clips?.length ?? 0) + (skin?.spotlight?.length ?? 0),
  firstItem,
  url: new URL(Astro.request.url),
  isFrameDark:
    isNotError(givenItem) &&
    typeof givenItem === 'object' &&
    givenItem.frameColorHex
      ? isDark(givenItem.frameColorHex)
      : false,
}
---

<html lang="en" hashi-theme="light" class:list={[passportClass()]}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    {
      mode === 'skin' &&
        data.passportSkinTheme?.itemAssetType === 'stylesheet-link' && (
          <link
            rel="stylesheet"
            href={`${data.passportSkinTheme.itemAssetValue}`}
          />
        )
    }

    {
      mode === 'skin' && data.passportSkinTheme?.itemAssetType === 'css' && (
        <style set:html={data.passportSkinTheme?.itemAssetValue ?? ''} />
      )
    }
  </head>

  <body
    style={typeof data.item === 'object' && data.item.frameColorHex
      ? `background-color: ${data.item.frameColorHex}`
      : undefined}
    class:list={[
      {
        'text-white': data.isFrameDark,
        'text-black': !data.isFrameDark,
      },
      passportClass('body'),
    ]}
    >{
      data.mode === 'item' && (
        <main class="h-screen w-screen p-6 grid grid-cols-2 gap-6">
          <ItemView item={data.passportItem ?? data.passportLinkItem} />

          <span class="grid grid-cols-1 grid-rows-[1fr_auto]">
            {typeof data.item === 'object' && data.item.description ? (
              <Description client:load text={data.item.description} />
            ) : (
              <span />
            )}
            <div>
              <p>{data.passportLinkItem ? 'Clipped' : 'Owned'} by</p>
              <p class="flex items-center gap-2">
                <span class="font-bold text-2xl grow">
                  {data.user?.username}
                </span>
                <img
                  src={data.user?.avatar}
                  class="rounded-full h-[43px] object-cover aspect-square"
                />

                <ClubsLogo />
              </p>
            </div>
          </span>
        </main>
      )
    }
    {
      data.mode === 'skin' && (
        <main class="h-screen w-screen p-28 grid grid-cols-[10rem_5fr_4fr] grid-rows-2 items-center gap-6 relative">
          {data.firstItem && (
            <div class="relative aspect-[1/1.391] col-start-3 row-start-1 row-span-2">
              <div class="w-full h-full border-x border-t border-surface-200 p-2 rounded-xl bg-white rotate-[2deg] shadow-xl">
                <ItemView item={data.firstItem} />
              </div>
              <span class="absolute font-bold text-6xl -right-5 bottom-0">
                + {data.numberItems}
              </span>
            </div>
          )}
          <span
            class="relative col-start-1 col-span-2 flex flex-col gap-2"
            class:list={passportClass('username-container')}
          >
            <span class="flex items-center gap-2 font-bold italic text-xl">
              <ClubsLogo class="h-4" />
              Passport
            </span>
            <span
              class="inline-block px-6 py-3 rounded-xl bg-surface-200"
              class:list={passportClass('username-content')}
            >
              <span
                class="text-4xl font-bold text-ellipsis overflow-hidden line-clamp-1"
                class:list={passportClass('username')}
              >
                {data.user?.username}
              </span>
            </span>
          </span>
          <img
            src={data.user?.avatar}
            class="rounded-full object-cover col-start-1 row-start-2 aspect-square"
          />
          <span
            class="col-start-2 row-start-2"
            class:list={[passportClass('description-container')]}
          >
            <div
              class="p-4"
              class:list={[passportClass('description-content')]}
            >
              <Description
                client:load
                text={data.profileDescription ?? ''}
                class="text-2xl"
                html={true}
              />
            </div>
          </span>
        </main>
      )
    }
    <MediaSDKs />
  </body>

  <div class="mt-24">
    <Debug
      data={{
        'Astro.params': Astro.params,
        data,
        profile,
        skin,
        itemFromPath,
        passportItemData,
      }}
    />
  </div>
</html>
<!--
<script>
  document.getElementById('og-video-element')?.addEventListener(
    'loadedmetadata',
    function () {
      ;(this as HTMLVideoElement).currentTime = 5 // Start the video from 5th second.
    },
    false,
  )
</script> -->
