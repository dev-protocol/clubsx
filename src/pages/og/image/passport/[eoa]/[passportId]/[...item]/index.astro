---
import {
  whenDefined,
  whenDefinedAll,
  whenNotError,
  isNotError,
  type UndefinedOr,
} from '@devprotocol/util-ts'
import { getPassportItemForPayload } from '@fixtures/api/passportItem'
import { getProfile } from '@fixtures/api/profile'
import { hashToItem } from '@fixtures/router/passportItem'
import { Debug } from 'astro:components'
import '@devprotocol/clubs-core/styles'
import { isDark } from '@fixtures/color'
import { ClubsLogo } from '@devprotocol/clubs-core/layouts'
import Description from './components/Description.vue'
import type { Clip } from '@pages/api/profile'
import { clientsSTokens } from '@devprotocol/dev-kit'
import { JsonRpcProvider } from 'ethers'

const { eoa, passportId, item: itemPath } = Astro.params

const profile = await whenDefined(eoa, (_eoa) => getProfile({ id: _eoa }))
const skin = whenDefinedAll([passportId, profile], ([id, prof]) =>
  prof.skins?.find((skin) => (skin as any).id === id)
)
const itemFromPath = whenDefined(itemPath, hashToItem)
const item = whenDefinedAll([skin, itemFromPath], ([_skin, _item]) =>
  whenNotError(_item, ({ type, id }) =>
    _skin[type] instanceof Array
      ? (_skin[type].find((x: Clip) => x.sTokenId === id) as UndefinedOr<Clip>)
      : _skin[type]
  )
)
const itemPayload = whenDefined(item, (_item) =>
  whenNotError(_item, (__item) =>
    typeof __item === 'string' ? __item : __item.payload
  )
)
const [passportItemData, userProfile] = await Promise.all([
  whenDefined(itemPayload, (_payload) =>
    whenNotError(_payload, (__payload) =>
      getPassportItemForPayload({ sTokenPayload: __payload })
    )
  ),
  whenDefined(eoa, (id) => getProfile({ id })),
])

const data = {
  user: userProfile,
  item: isNotError(item) ? item : undefined,
  passportItem: isNotError(passportItemData) ? passportItemData : undefined,
  isFrameDark:
    isNotError(item) && typeof item === 'object'
      ? isDark(item.frameColorHex)
      : false,
}

const provider = new JsonRpcProvider(
  `https://polygon-mainnet.g.alchemy.com/v2/${import.meta.env.PUBLIC_ALCHEMY_KEY ?? ''}`
)
// @ts-ignore
const [l1, l2] = await clientsSTokens(provider)
const contract = l1 ?? l2
const tokenURI =
  item && !(item instanceof Error)
    ? await contract?.tokenURI(Number(item.sTokenId))
    : undefined
---

<html lang="en" hashi-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
  </head>

  <body
    style={typeof data.item === 'object' && data.item.frameColorHex
      ? `background-color: ${data.item.frameColorHex}`
      : undefined}
    class:list={{
      'text-white': data.isFrameDark,
      'text-black': !data.isFrameDark,
    }}
  >
    <main class="h-screen w-screen p-6 grid grid-cols-2 gap-6">
      <span class="relative cursor-pointer">
        <>
          {
            data?.passportItem?.itemAssetType === 'short-video' ||
            data?.passportItem?.itemAssetType === 'short-video-link' ? (
              <video
                loop
                muted
                autoplay
                id="og-video-element"
                poster={tokenURI ? tokenURI.image : ''}
                src={data.passportItem.itemAssetValue || ''}
                class="w-full h-full object-cover rounded-xl"
              />
            ) : (
              <img
                id="og-image-element"
                src={data.passportItem?.itemAssetValue}
                class="w-full h-full object-cover rounded-xl"
              />
            )
          }
          {
            data?.passportItem?.itemAssetType === 'short-video' ||
              data?.passportItem?.itemAssetType === 'short-video-link'
              // || // @TODO: uncomment this when the type is updated.
              // data?.passportItem?.itemAssetType === 'image-playable' ||
              // data?.passportItem?.itemAssetType === 'image-playable-link'
                ? (
                  <div
                    class="absolute top-0 bottom-0 left-0 right-0 m-auto h-[7.5vw] w-[7.5vw]"
                    class:list={{
                      'text-white': data.isFrameDark,
                      'text-black': !data.isFrameDark,
                    }}
                  >
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-full w-full">
                      <path opacity="0.28" d="M12.0001 1.8501C6.39441 1.8501 1.8501 6.39441 1.8501 12.0001C1.8501 17.6058 6.39441 22.1501 12.0001 22.1501C17.6058 22.1501 22.1501 17.6058 22.1501 12.0001C22.1501 6.39441 17.6058 1.8501 12.0001 1.8501Z" fill="#111111"/>
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M13.5722 9.22618L13.795 9.36943C14.2922 9.68901 14.7082 9.95643 15.0192 10.199C15.3367 10.4466 15.6336 10.7336 15.7987 11.1242C16.0353 11.6841 16.0353 12.3158 15.7987 12.8757C15.6336 13.2663 15.3367 13.5533 15.0192 13.8009C14.7082 14.0435 14.2922 14.3109 13.795 14.6305L13.5722 14.7737C12.9965 15.1438 12.5209 15.4496 12.1268 15.6547C11.7315 15.8604 11.3024 16.0298 10.8397 15.9967C10.1887 15.9502 9.58998 15.6234 9.19884 15.1009C8.92081 14.7295 8.83123 14.277 8.79054 13.8332C8.74998 13.3909 8.74999 12.8254 8.75 12.141V11.8589C8.74999 11.1745 8.74998 10.609 8.79054 10.1667C8.83123 9.7229 8.92081 9.27037 9.19884 8.899C9.58998 8.37654 10.1887 8.04966 10.8397 8.00317C11.3024 7.97012 11.7315 8.13947 12.1268 8.34521C12.5209 8.5503 12.9965 8.85609 13.5722 9.22618Z" fill="currentColor"/>
                    </svg>
                  </div>
                )
                : <></>
          }
        </>
      </span>

      <span class="grid grid-cols-1 grid-rows-[1fr_auto]">
        {
          typeof data.item === 'object' ? (
            <Description client:load text={data.item.description} />
          ) : (
            <span />
          )
        }
        <div>
          <p>Owned by</p>
          <p class="flex items-center gap-2">
            <span class="font-bold text-2xl grow">{data.user?.username}</span>
            <img
              src={data.user?.avatar}
              class="rounded-full h-[43px] aspect-square"
            />

            <ClubsLogo />
          </p>
        </div>
      </span>
    </main>
  </body>

  <div class="mt-24">
    <Debug
      data={{
        'Astro.params': Astro.params,
        profile,
        skin,
        itemFromPath,
        item,
        itemPayload,
        passportItemData,
        tokenURI,
      }}
    />
  </div>
</html>

<script>
  document.getElementById("og-video-element")?.addEventListener("loadedmetadata", function() {
    (this as HTMLVideoElement).currentTime = 5; // Start the video from 5th second.
  }, false);
</script>
