---
import {
  whenDefined,
  whenDefinedAll,
  whenNotError,
  isNotError,
  type UndefinedOr,
} from '@devprotocol/util-ts'
import { JsonRpcProvider } from 'ethers'
import { getPassportItemForPayload } from '@fixtures/api/passportItem'
import { getProfile } from '@fixtures/api/profile'
import { hashToItem } from '@fixtures/router/passportItem'
import { Debug } from 'astro:components'
import '@devprotocol/clubs-core/styles'
import { isDark } from '@fixtures/color'
import { ClubsLogo } from '@devprotocol/clubs-core/layouts'
import Description from './components/Description.vue'
import type { Clip } from '@pages/api/profile'
import { clientsSTokens } from '@devprotocol/dev-kit'

const { eoa, passportId, item: itemPath } = Astro.params

const profile = await whenDefined(eoa, (_eoa) => getProfile({ id: _eoa }))
const skin = whenDefinedAll([passportId, profile], ([id, prof]) =>
  prof.skins?.find((skin) => (skin as any).id === id),
)

const itemFromPath = whenDefined(itemPath, hashToItem)
const item = whenDefinedAll([skin, itemFromPath], ([_skin, _item]) =>
  whenNotError(_item, ({ type, id }) =>
    _skin[type] instanceof Array
      ? (_skin[type].find((x: Clip) => x.sTokenId === id) as UndefinedOr<Clip>)
      : _skin[type],
  ),
)
const itemPayload = whenDefined(item, (_item) =>
  whenNotError(_item, (__item) =>
    typeof __item === 'string' ? __item : __item.payload,
  ),
)

const [passportItemData, userProfile] = await Promise.all([
  whenDefined(itemPayload, (_payload) =>
    whenNotError(_payload, (__payload) =>
      getPassportItemForPayload({ sTokenPayload: __payload }),
    ),
  ),
  whenDefined(eoa, (id) => getProfile({ id })),
])

const data = {
  user: userProfile,
  item: isNotError(item) ? item : undefined,
  passportItem: isNotError(passportItemData) ? passportItemData : undefined,
  isFrameDark:
    isNotError(item) && typeof item === 'object'
      ? isDark(item.frameColorHex)
      : false,
}

const provider = new JsonRpcProvider(
  `https://polygon-mainnet.g.alchemy.com/v2/${import.meta.env.PUBLIC_ALCHEMY_KEY ?? ''}`,
)
// @ts-ignore
const [l1, l2] = await clientsSTokens(provider)
const contract = l1 ?? l2
const tokenURI =
  item && !(item instanceof Error)
    ? await contract?.tokenURI(Number(item.sTokenId))
    : undefined
---

<html lang="en" hashi-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
  </head>

  <body
    style={typeof data.item === 'object' && data.item.frameColorHex
      ? `background-color: ${data.item.frameColorHex}`
      : undefined}
    class:list={{
      'text-white': data.isFrameDark,
      'text-black': !data.isFrameDark,
    }}
  >
    <main class="h-screen w-screen p-6 grid grid-cols-2 gap-6">
      <span class="relative cursor-pointer">
        {
          data.passportItem?.itemAssetType === 'short-video' ||
          data.passportItem?.itemAssetType === 'short-video-link' ? (
            <>
              <video
                loop
                muted
                controls
                autoplay
                src={data.passportItem.itemAssetValue || ''}
                poster={tokenURI ? tokenURI.image : ''}
                class="w-full h-full object-cover rounded-xl"
              />
              <div
                class="absolute top-0 bottom-0 left-0 right-0 m-auto h-[7.5vw] w-[7.5vw]"
                class:list={{
                  'text-white': data.isFrameDark,
                  'text-black': !data.isFrameDark,
                }}
              >
                <svg
                  class="w-full h-full"
                  id="Layer_1"
                  data-name="Layer 1"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  width="24"
                  height="24"
                  color="#000000"
                  stroke="currentColor"
                  class:list={{
                    'text-white': data.isFrameDark,
                    'text-black': !data.isFrameDark,
                  }}
                >
                  <defs>
                    <style>
                      .cls-6374f543b67f094e4896c5e6-1 {
                        fill: none;
                        stroke: currentColor;
                        stroke-miterlimit: 10;
                      }
                    </style>
                  </defs>
                  <circle class="cls-6374f543b67f094e4896c5e6-1" cx="12" cy="12" r="10.5"></circle>
                  <polygon class="cls-6374f543b67f094e4896c5e6-1" points="17.73 12 9.14 16.77 9.14 7.23 17.73 12"></polygon>
                </svg>
              </div>
            </>
          ) : data.passportItem?.itemAssetValue ? (
            <img
              src={data.passportItem.itemAssetValue}
              class="w-full h-full object-cover rounded-xl"
            />
          ) : null
        }
      </span>
      <span class="grid grid-cols-1 grid-rows-[1fr_auto]">
        {
          typeof data.item === 'object' ? (
            <Description client:load text={data.item.description} />
          ) : (
            <span />
          )
        }
        <div>
          <p>Owned by</p>
          <p class="flex items-center gap-2">
            <span class="font-bold text-2xl grow">{data.user?.username}</span>
            <img
              src={data.user?.avatar}
              class="rounded-full h-[43px] aspect-square"
            />

            <ClubsLogo />
          </p>
        </div>
      </span>
    </main>
  </body>

  <div class="mt-24">
    <Debug
      data={{
        'Astro.params': Astro.params,
        profile,
        skin,
        itemFromPath,
        item,
        itemPayload,
        passportItemData,
        tokenURI,
      }}
    />
  </div>
</html>
