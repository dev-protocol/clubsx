---
import {
  whenDefined,
  whenDefinedAll,
  whenNotError,
  isNotError,
  type UndefinedOr,
} from '@devprotocol/util-ts'
import { getPassportItemForPayload } from '@fixtures/api/passportItem'
import { getProfile } from '@fixtures/api/profile'
import { hashToItem } from '@fixtures/router/passportItem'
import { Debug } from 'astro:components'
import '@devprotocol/clubs-core/styles'
import { isDark } from '@fixtures/color'
import { ClubsLogo } from '@devprotocol/clubs-core/layouts'
import Description from './components/Description.vue'
import type { Clip } from '@pages/api/profile'
import { clientsSTokens } from '@devprotocol/dev-kit'
import { JsonRpcProvider } from 'ethers'

const { eoa, passportId, item: itemPath } = Astro.params

const profile = await whenDefined(eoa, (_eoa) => getProfile({ id: _eoa }))
const skin = whenDefinedAll([passportId, profile], ([id, prof]) =>
  prof.skins?.find((skin) => (skin as any).id === id)
)
const itemFromPath = whenDefined(itemPath, hashToItem)
const item = whenDefinedAll([skin, itemFromPath], ([_skin, _item]) =>
  whenNotError(_item, ({ type, id }) =>
    _skin[type] instanceof Array
      ? (_skin[type].find((x: Clip) => x.sTokenId === id) as UndefinedOr<Clip>)
      : _skin[type]
  )
)
const itemPayload = whenDefined(item, (_item) =>
  whenNotError(_item, (__item) =>
    typeof __item === 'string' ? __item : __item.payload
  )
)
const [passportItemData, userProfile] = await Promise.all([
  whenDefined(itemPayload, (_payload) =>
    whenNotError(_payload, (__payload) =>
      getPassportItemForPayload({ sTokenPayload: __payload })
    )
  ),
  whenDefined(eoa, (id) => getProfile({ id })),
])

const data = {
  user: userProfile,
  item: isNotError(item) ? item : undefined,
  passportItem: isNotError(passportItemData) ? passportItemData : undefined,
  isFrameDark:
    isNotError(item) && typeof item === 'object'
      ? isDark(item.frameColorHex)
      : false,
}

const provider = new JsonRpcProvider(
  `https://polygon-mainnet.g.alchemy.com/v2/${import.meta.env.PUBLIC_ALCHEMY_KEY ?? ''}`
)
// @ts-ignore
const [l1, l2] = await clientsSTokens(provider)
const contract = l1 ?? l2
const tokenURI =
  item && !(item instanceof Error)
    ? await contract?.tokenURI(Number(item.sTokenId))
    : undefined
---

<html lang="en" hashi-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
  </head>

  <body
    style={typeof data.item === 'object' && data.item.frameColorHex
      ? `background-color: ${data.item.frameColorHex}`
      : undefined}
    class:list={{
      'text-white': data.isFrameDark,
      'text-black': !data.isFrameDark,
    }}
  >
    <main class="h-screen w-screen p-6 grid grid-cols-2 gap-6">
      <span class="relative cursor-pointer">
        <>
          {
            data?.passportItem?.itemAssetType === 'short-video' ||
            data?.passportItem?.itemAssetType === 'short-video-link' ? (
              <video
                loop
                muted
                autoplay
                id="og-video-element"
                poster={tokenURI ? tokenURI.image : ''}
                src={data.passportItem.itemAssetValue || ''}
                class="w-full h-full object-cover rounded-xl"
              />
            ) : (
              <img
                id="og-image-element"
                src={data.passportItem?.itemAssetValue}
                class="w-full h-full object-cover rounded-xl"
              />
            )
          }
          {
            data?.passportItem?.itemAssetType === 'short-video' ||
              data?.passportItem?.itemAssetType === 'short-video-link'
              // || // @TODO: uncomment this when the type is updated.
              // data?.passportItem?.itemAssetType === 'image-playable' ||
              // data?.passportItem?.itemAssetType === 'image-playable-link'
                ? (
                  <div
                    class="absolute top-0 bottom-0 left-0 right-0 m-auto h-[7.5vw] w-[7.5vw]"
                    class:list={{
                      'text-white': data.isFrameDark,
                      'text-black': !data.isFrameDark,
                    }}
                  >
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M15.3567 5.46931C13.7888 4.46134 12.5529 3.66683 11.5432 3.14128C10.5317 2.61479 9.59278 2.27179 8.64379 2.33958C7.19713 2.4429 5.86662 3.16929 4.99742 4.33031C4.42723 5.09193 4.20804 6.06717 4.10392 7.20277C3.99998 8.33631 3.99999 9.80556 4 11.6695V12.3309C3.99999 14.1949 3.99998 15.6641 4.10392 16.7976C4.20804 17.9332 4.42723 18.9085 4.99742 19.6701C5.86662 20.8311 7.19713 21.5575 8.64379 21.6608C9.59278 21.7286 10.5317 21.3856 11.5432 20.8591C12.5529 20.3336 13.7888 19.5391 15.3568 18.5311L15.8764 18.1971C17.2332 17.3249 18.3099 16.6327 19.1029 16.0143C19.9047 15.3889 20.535 14.7519 20.8754 13.9463C21.4011 12.7022 21.4011 11.2983 20.8754 10.0541C20.535 9.24849 19.9047 8.61147 19.1029 7.98617C18.3099 7.36772 17.2332 6.67557 15.8763 5.80333L15.3567 5.46931Z" fill="currentColor"/>
                    </svg>

                  </div>
                )
                : <></>
          }
        </>
      </span>

      <span class="grid grid-cols-1 grid-rows-[1fr_auto]">
        {
          typeof data.item === 'object' ? (
            <Description client:load text={data.item.description} />
          ) : (
            <span />
          )
        }
        <div>
          <p>Owned by</p>
          <p class="flex items-center gap-2">
            <span class="font-bold text-2xl grow">{data.user?.username}</span>
            <img
              src={data.user?.avatar}
              class="rounded-full h-[43px] aspect-square"
            />

            <ClubsLogo />
          </p>
        </div>
      </span>
    </main>
  </body>

  <div class="mt-24">
    <Debug
      data={{
        'Astro.params': Astro.params,
        profile,
        skin,
        itemFromPath,
        item,
        itemPayload,
        passportItemData,
        tokenURI,
      }}
    />
  </div>
</html>

<script>
  document.getElementById("og-video-element")?.addEventListener("loadedmetadata", function() {
    (this as HTMLVideoElement).currentTime = 5; // Start the video from 5th second.
  }, false);
</script>
