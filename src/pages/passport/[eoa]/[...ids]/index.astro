---
import { isAddress } from 'ethers'
import type { Profile } from '@pages/api/profile'
import { getProfile } from '@fixtures/api/profile'
import { whenDefined } from '@devprotocol/util-ts'
import { passportClass } from '@fixtures/ui/passport'
import {
  getPassportItemForPayload,
  getSBTsForEOAFromClubsUrlHash,
} from '@fixtures/api/passportItem'
import { markdownToHtml, ProseTextInherit } from '@devprotocol/clubs-core'
import RedHeart from '@assets/emoji-red-heart.png'

import Layout from '../../Layout.astro'
import dummyData from '../../dummyData.json'
import Icon from '../../components/Icons.vue'
import type { PassportClip } from '../../types'
import Like from '../../components/Like.svelte'
import PassportClips from '../../components/PassportClips.vue'
import { clubsUrlToKeccak256Tag } from '@plugins/achievements/utils'
import MediaSDKs from '@components/Passports/MediaSDKs.astro'
import Onboarding from '../../components/Onboarding.vue'

const { eoa, ids } = Astro.params
const isEOA = isAddress(eoa)

const id = ids?.split('/')?.at(0) ?? '' // Get the skin id from the URL.
const passportElementId =
  new URL(Astro.request.url).searchParams.get('i') ?? undefined // Get the element id from the URL.

const _profile: Profile = await getProfile({ id: eoa ?? '' })
const profile = {
  ..._profile,
  skins: _profile?.skins?.filter((skin) => !skin.isHidden) ?? [], // Filter out hidden skins.
}

const skin =
  profile?.skins?.find((skin) => skin.id === id) ?? profile?.skins?.at(0)
const htmlDescription = markdownToHtml(skin?.description)
const _passportSkinBGMs = skin?.bgm
const _passportSkinClips = skin?.clips
const _passportSkinVideos = skin?.videos
const _passportSpotlight = skin?.spotlight
const _currentLikes = id
  ? skin?.likes
  : (profile?.skins?.at(0)?.likes ?? profile?.likes)

const _currentTheme = skin?.theme

const passportTheme = await whenDefined(_currentTheme, () =>
  getPassportItemForPayload({
    sTokenPayload: _currentTheme ?? '',
  })
    .then((item) => (item instanceof Error ? undefined : item))
    .catch(() => undefined),
)

const clubsUrl = passportTheme?.clubsUrl
const clubsUrlHash = clubsUrlToKeccak256Tag(clubsUrl ?? '')
const [
  _clubsSBTs,
  passportSkinBGMs,
  passportSkinVideos,
  passportSkinClips,
  passportSpotlight,
] = await Promise.all([
  whenDefined(clubsUrlHash, () =>
    getSBTsForEOAFromClubsUrlHash(
      clubsUrlHash,
      clubsUrl ? clubsUrl : '',
      isEOA ? eoa : '',
    )
      .then((sbt) => (sbt instanceof Error ? undefined : sbt))
      .catch(() => undefined),
  ),
  whenDefined(_passportSkinBGMs, () =>
    getPassportItemForPayload({
      sTokenPayload: _passportSkinBGMs?.payload ?? '',
    })
      .then((item) =>
        item instanceof Error ? undefined : { ..._passportSkinBGMs, ...item },
      )
      .catch(() => undefined),
  ),
  whenDefined(_passportSkinVideos, async (videos) => {
    if (!videos.length) {
      return undefined
    }

    return Promise.all(
      videos.map((item) =>
        getPassportItemForPayload({ sTokenPayload: item?.payload ?? '' })
          .then((clip) =>
            clip instanceof Error ? undefined : { ...item, ...clip },
          )
          .catch(() => undefined),
      ) ?? [],
    )
      .then((items) => items.filter((items) => !!items))
      .then((items) => (items.length ? items : undefined))
      .catch(() => undefined)
  }),
  whenDefined(_passportSkinClips, async (clips) => {
    if (!clips.length) {
      return undefined
    }

    return Promise.all(
      clips.map((item) =>
        item.link
          ? item
          : getPassportItemForPayload({ sTokenPayload: item.payload ?? '' })
              .then(
                (clip) =>
                  (clip instanceof Error
                    ? undefined
                    : {
                        ...item,
                        ...clip,
                        description: item.description,
                        frameColorHex: item.frameColorHex,
                      }) as PassportClip,
              )
              .catch(() => undefined),
      ) ?? [],
    )
      .then((items) => items.filter((items) => !!items))
      .then((items) => (items.length ? items : undefined))
      .catch(() => undefined)
  }),
  whenDefined(_passportSpotlight, async (spotLights) => {
    if (!spotLights.length) {
      return undefined
    }

    return Promise.all(
      spotLights.map((item) =>
        item.link
          ? item
          : getPassportItemForPayload({ sTokenPayload: item.payload ?? '' })
              .then(
                (spotlight) =>
                  (spotlight instanceof Error
                    ? undefined
                    : {
                        ...item,
                        ...spotlight,
                        description: item.description,
                        frameColorHex: item.frameColorHex,
                      }) as PassportClip,
              )
              .catch(() => undefined),
      ) ?? [],
    )
      .then((items) => items.filter((items) => !!items))
      .then((items) => (items.length ? items.slice(0, 3) : undefined))
      .catch(() => undefined)
  }),
])
const isSnsEmpty =
  profile?.sns && Object.keys(profile.sns).every((k) => !profile.sns?.[k])
---

<Layout
  theme="light"
  eoa={eoa ?? ''}
  sTokenPayload={skin?.theme}
  skins={profile?.skins ?? []}
  selectedSkinId={skin?.id ?? ''}
  itemHash={passportElementId}
  preload={[{ as: 'image', href: RedHeart.src }]}
  connectButton="show"
  showPostButton="edit"
>
  <div class="grid gap-6 lg:gap-12 mb-32">
    <section class:list={passportClass('account-container')}>
      <span
        class="grid grid-cols-[3rem_1fr] lg:grid-cols-[8rem_1fr_auto] justify-items-start max-w-screen-lg mx-auto px-2 gap-6 lg:gap-y-8"
        class:list={[
          passportClass('account-content'),
          {
            'grid-rows-[auto_auto_auto_auto_auto] lg:grid-rows-[auto_auto_auto_auto]':
              passportSkinBGMs,
          },
          { 'grid-rows-[auto_auto_auto]': !passportSkinBGMs },
        ]}
      >
        <span
          class="col-start-1 col-span-1 row-start-1 row-span-2"
          class:list={passportClass('avatar-container')}
        >
          <span
            class="flex flex-col items-center p-1.5 lg:p-2 rounded-full bg-surface-300"
            class:list={passportClass('avatar-content')}
          >
            <img
              src={profile.avatar}
              class="rounded-full object-cover w-full aspect-square bg-lightgray bg-cover bg-center bg-no-repeat"
              class:list={passportClass('avatar')}
              alt="Profile"
            />
          </span>
        </span>
        <span
          class="col-start-2 col-span-1 content-center"
          class:list={(passportClass('username-container'),
          {
            'row-span-2': isSnsEmpty,
          })}
        >
          <span
            class="grid grid-flow-col justify-center items-center gap-6 px-3 py-1.5 lg:px-6 lg:py-3 rounded-xl bg-surface-200"
            class:list={passportClass('username-content')}
          >
            <span
              class="text-xl lg:text-4xl font-bold text-ellipsis overflow-hidden line-clamp-1"
              class:list={passportClass('username')}
            >
              {profile.username}
            </span>

            {
              _clubsSBTs && (
                <div class="grid grid-cols-3">
                  {_clubsSBTs.map((sbt) => (
                    <a
                      href={sbt.url}
                      target="_blank"
                      class="relative group flex items-center justify-center gap-2 p-2 rounded-lg"
                    >
                      <img
                        src={sbt.image}
                        class="w-8 h-8 rounded-lg"
                        alt={sbt.name}
                      />
                      <span class="absolute text-sm font-bold opacity-0 group-hover:opacity-100">
                        {sbt.name}
                      </span>
                    </a>
                  ))}
                </div>
              )
            }
          </span>
        </span>

        {
          passportSkinBGMs && (
            <span
              class="col-start-1 row-start-2 lg:col-start-3 lg:row-start-1 col-span-1 row-span-1 content-center"
              class:list={passportClass('music-container')}
            >
              <span
                class="flex items-center gap-[15px] px-[16px] py-[8px] rounded-lg bg-surface-200"
                class:list={passportClass('music-content')}
              >
                <span class="opacity-50">
                  <Icon icon="muted" />
                </span>

                <span>
                  <Icon icon="music_waves" />
                </span>

                <span class="truncate font-bold">{dummyData.musicName}</span>
              </span>
            </span>
          )
        }

        {
          profile?.sns && !isSnsEmpty && (
            <span
              class="col-start-1 col-span-2 row-start-2 lg:col-start-2 lg:col-span-1 lg:-mt-8"
              class:list={passportClass('links-container')}
            >
              <span
                class="grid grid-cols-5 items-start gap-6 p-3 rounded-lg bg-white"
                class:list={passportClass('links-content')}
              >
                {profile?.sns?.x && (
                  <a href={`https://x.com/${profile?.sns?.x}`} target="_blank">
                    <Icon icon="x" />
                  </a>
                )}
                {profile?.sns?.twitch && (
                  <a
                    href={`https://twitch.tv/${profile?.sns?.twitch}`}
                    target="_blank"
                  >
                    <Icon icon="twitch" />
                  </a>
                )}
                {profile?.sns?.instagram && (
                  <a
                    href={`https://instagram.com/${profile?.sns?.instagram}`}
                    target="_blank"
                  >
                    <Icon icon="instagram" />
                  </a>
                )}
                {profile?.sns?.tiktok && (
                  <a
                    href={`https://tiktok.com/${profile?.sns?.tiktok}`}
                    target="_blank"
                  >
                    <Icon icon="tiktok" />
                  </a>
                )}
                {profile?.sns?.youtube && (
                  <a
                    href={`https://youtube.com/${profile?.sns?.youtube}`}
                    target="_blank"
                  >
                    <Icon icon="youtube" />
                  </a>
                )}
              </span>
            </span>
          )
        }

        <span
          class="col-start-1 col-span-2 lg:col-span-3 lg:row-start-3 w-full"
          class:list={[passportClass('description-container')]}
        >
          <span
            class="flex w-full justify-center items-center gap-2.5 p-4 self-stretch block rounded-xl border border-black/10"
            class:list={[
              passportClass('description-content'),
              { hidden: !htmlDescription },
            ]}
          >
            <div
              class:list={[ProseTextInherit, passportClass('description')]}
              set:html={htmlDescription}
            />
          </span>
        </span>
      </span>
    </section>

    {
      passportSkinVideos && (
        <section class="grid justify-items-start w-full max-w-screen-lg mx-auto px-4 gap-6 lg:gap-24 mb-10">
          <span class:list={passportClass('video-container')}>
            <span class:list={passportClass('video-content')}>
              <img
                src={dummyData.videoThumbnail}
                class="w-full h-auto aspect-video rounded-sm"
                class:list={passportClass('video')}
                alt="Video"
              />
            </span>
          </span>
        </section>
      )
    }

    <section
      class="grid w-full max-w-screen-lg mx-auto px-2 gap-6 lg:gap-24 mb-10"
    >
      {
        passportSpotlight?.length && (
          <div class:list={passportClass('spotlight-container')}>
            <div class:list={passportClass('spotlight-content')}>
              <PassportClips
                id={id}
                eoa={eoa!}
                url={Astro.request.url}
                client:load
                skinSection="spotlight"
                clips={passportSpotlight}
                skinId={skin?.id ?? ''}
              />
            </div>
          </div>
        )
      }

      {
        passportSkinClips?.length && (
          <div class:list={passportClass('clips-container')}>
            <div class:list={passportClass('clips-content')}>
              <PassportClips
                id={id}
                eoa={eoa!}
                url={Astro.request.url}
                client:load
                skinSection="clips"
                clips={passportSkinClips}
                skinId={skin?.id ?? ''}
              />
            </div>
          </div>
        )
      }

      {
        skin === undefined && (
          <span class="mb-32">
            <Onboarding client:only="vue" eoa={eoa} profile={profile} />
          </span>
        )
      }

      {
        /**
         * Hidden now
        <a href={`/passport/${eoa}/clubs`} class="hs-link place-self-start"
          >Clubs</a
        >
         */
      }
    </section>
  </div>

  <div class="fixed bottom-0 right-0 p-2 lg:p-6">
    <Like
      client:load
      props={{
        profileId: eoa ? eoa : '',
        currentLikes: _currentLikes ? _currentLikes : 0,
        skinId: id || skin?.id || undefined,
      }}
    />
  </div>

  <input
    id="passportElementIdValue"
    hidden
    value={passportElementId}
    disabled
  />

  <MediaSDKs />
</Layout>

<script>
  let observer: MutationObserver
  const targetElement = document
  const observationConfig = { attributes: true, childList: true, subtree: true }
  const observationCallback: MutationCallback = (mutationList, observer) => {
    const elementId = (
      document.getElementById('passportElementIdValue') as HTMLInputElement
    )?.value

    console.log('Element id in observer', elementId)

    if (elementId) {
      const element = document.getElementById(elementId)
      console.log('Element', element)
      if (element) {
        element.scrollIntoView({
          behavior: 'smooth',
          block: 'end',
          inline: 'nearest',
        })
        observer?.disconnect() // Disconnect after scrolling
      }
    }
  }

  observer = new MutationObserver(observationCallback)
  observer.observe(targetElement, observationConfig) // Start observing.
</script>
