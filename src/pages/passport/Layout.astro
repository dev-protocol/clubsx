---
import { isNotError, whenDefined, whenNotError } from '@devprotocol/util-ts'
import { passportClass } from '@fixtures/ui/passport'
import { ClubsPictogramAdaptable as Favicon } from '@devprotocol/clubs-core/images'

import '@devprotocol/clubs-core/styles'
import type { Clip, Skin } from '@pages/api/profile'
import Header from '@components/Global/Header.astro'
import Footer from '@components/Global/Footer.vue'
import { getPassportItemForPayload } from '@fixtures/api/passportItem'
import SkinSwitch from 'src/pages/passport/components/SkinSwitch.svelte'
import AchivementNotification from '../../pages/passport/components/AchivementNotification.svelte'
import PostButton from './components/PostButton.vue'
import { parseAcceptLanguage } from 'intl-parse-accept-language'
import { bytes32Hex } from '@devprotocol/clubs-core'
import { toUtf8Bytes } from 'ethers'
import { hashToItem } from '@fixtures/router/passportItem'

type Props = {
  eoa?: string
  skins?: Skin[]
  selectedSkinId?: string
  sTokenPayload?: string
  itemHash?: string
  theme?: 'light' | 'dark' | 'auto'
  preload?: { as: string; href: string }[]
  connectButton?: 'show' | 'hidden' | 'show-when-signedin'
  showSkinSwitcher?: boolean
  showPostButton?: 'hidden' | 'post' | 'edit'
}

const {
  theme = 'dark',
  sTokenPayload,
  skins = [],
  eoa = '',
  selectedSkinId = '',
  itemHash,
  preload = [],
  connectButton,
  showSkinSwitcher = true,
  showPostButton = 'hidden',
} = Astro.props as Props

const passportSkinTheme = await whenDefined(sTokenPayload, (payload: string) =>
  getPassportItemForPayload({
    sTokenPayload: payload ?? '',
  })
    .then((item) => (item instanceof Error ? undefined : item))
    .catch(() => undefined),
)

const requestURL = new URL(Astro.url)
const ogImageURLHost = requestURL.origin.includes('prerelease.clubs.place')
  ? 'prerelease.clubs.place'
  : requestURL.origin.includes('clubs.place')
    ? 'clubs.place'
    : `${requestURL.hostname}:${requestURL.port}`
const skin = skins.find((x) => (selectedSkinId ? x.id === selectedSkinId : x))
const clip =
  whenDefined(itemHash, (item_) =>
    whenNotError(hashToItem(item_), (res) =>
      ((skin && res.type in skin ? skin[res.type] : []) as Clip[])!.find(
        (y) => y.id === res.id,
      ),
    ),
  ) ?? new Error()
const cacheKey = toUtf8Bytes(
  isNotError(clip) ? JSON.stringify(clip) : JSON.stringify(skin),
)
const ogpImageURL = `${requestURL.protocol}//${ogImageURLHost}/og/image/passport/${eoa}/${selectedSkinId}${itemHash ? `/${itemHash}` : ''}?cache=${bytes32Hex(cacheKey)}`
const image = `https://capture.clubs.place/api/generate?h=630&w=1200&src=${ogpImageURL}`
const imageX = `https://capture.clubs.place/api/generate?h=675&w=1200&src=${ogpImageURL}`
const name = 'Clubs'
const url = 'https://www.clubs.place/'
const twitterHandle = 'poweredbyClubs'
const title = 'Clubs | All-in-One Space for Creators'
const description =
  'Clubs is an all-in-one space for creators to manage their NFTs, DAOs, and more.'
const langs = parseAcceptLanguage(Astro.request.headers.get('Accept-Language'))
const preloads = [
  ...preload,
  { as: 'image', href: image },
  { as: 'image', href: imageX },
]
---

<html
  lang="en"
  hashi-theme={theme === 'auto' ? undefined : theme}
  class:list={passportClass()}
>
  <head>
    <title>{title}</title>

    <link rel="icon" type="image/svg" href={Favicon.src} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />

    {
      preloads.map((item) => (
        <link rel="preload" as={item.as} href={item.href} />
      ))
    }

    {
      passportSkinTheme?.itemAssetType === 'stylesheet-link' && (
        <link rel="stylesheet" href={`${passportSkinTheme.itemAssetValue}`} />
      )
    }

    {
      passportSkinTheme?.itemAssetType === 'css' && (
        <style set:html={passportSkinTheme?.itemAssetValue ?? ''} />
      )
    }

    {
      (requestURL.host.includes('localhost') ||
        requestURL.host.includes('prerelease')) &&
        requestURL.searchParams.has('css') && (
          <link rel="stylesheet" href={requestURL.searchParams.get('css')} />
        )
    }

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta property="og:image" content={`${image}`} />
    <meta name="description" content={`${description}`} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content={name} />
    <meta name="twitter:site" content={twitterHandle} />
    <meta name="twitter:creator" content={twitterHandle} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={`${imageX}`} />
  </head>

  <body
    class="bg-background font-body text-surface-ink"
    class:list={passportClass('body')}
  >
    <div class:list={passportClass('hero-container')}>
      <div class:list={passportClass('hero')}></div>
    </div>
    <div
      class="relative flex flex-col max-w-full mx-auto"
      class:list={passportClass('main-container')}
      style="min-height: 100dvh"
    >
      <slot name="before-header" />

      <Header connectButton={connectButton} pageTitle="Passport">
        <AchivementNotification
          address={eoa}
          client:only="svelte"
          slot="before:heading"
        />
        {
          showSkinSwitcher && (
            <SkinSwitch
              client:load
              slot="passport:profile:switcher"
              skins={skins ?? []}
              eoa={eoa ?? ''}
              selectedSkinId={selectedSkinId ?? skins?.at(0)?.id ?? ''}
            />
          )
        }
        {
          showPostButton !== 'hidden' && (
            <PostButton
              client:only="vue"
              slot="header:before:sibling:connect-button"
              skinId={selectedSkinId}
              mode={showPostButton}
              {eoa}
            />
          )
        }
        {
          showPostButton !== 'hidden' && (
            <PostButton
              client:only="vue"
              slot="header:before:mobile-open-bar"
              skinId={selectedSkinId}
              mode={showPostButton}
              {eoa}
            />
          )
        }
      </Header>

      <div
        class:list={passportClass('main-content')}
        class="flex-grow overflow-y-auto md:overflow-y-visible"
      >
        <main class:list={passportClass('main')}>
          <slot />
        </main>
      </div>

      <Footer />
    </div>
  </body>
</html>
