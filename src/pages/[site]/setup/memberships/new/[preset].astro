---
import AdminMembershipsAdditionForm from '@components/AdminMembershipsForm/AdminMembershipsAdditionForm.svelte'
import { config as _config } from '@fixtures/config'
import { adminFactory } from '@devprotocol/clubs-core'
import type { Membership } from '@plugins/memberships'
import memberships from '@plugins/memberships'
import SetupLayout from '@layouts/Setup.astro'
import PageNotFound from '@pages/404.astro'

const { site, preset } = Astro.params

const { getStaticPaths, getCurrentConfig } = adminFactory({
  config: async () => await _config(site),
  plugins: {
    memberships,
  },
})

const config = await getCurrentConfig()
const path = (await getStaticPaths()).find(
  ({ params }) => params.page === `memberships`
)

const { props } = path || { props: undefined }

const presets = (props?.presets ?? []) as Membership[]

const membership = presets.find(
  (_membership: Membership) => _membership.id === preset
)

if (!membership) {
  throw new Error(`Membership not found: ${preset}`)
}

const baseUrl = ((url) => `${url.protocol}//${url.host}/${site}/setup`)(
  new URL(Astro.request.url)
)

const siteBaseUrl = ((url) =>
  `${url.protocol}//${url.host}/${site}/setup/memberships`)(
  new URL(Astro.request.url)
)
---

{
  path && props ? (
    <SetupLayout
      {config}
      {...props}
      setupStep="MEMBERSHIPS"
      title={`Setup Clubs | Memberships | ${preset}`}
    >
      <section class="grid gap-16">
        <h1 class="font-title text-lg font-bold">Memberships</h1>

        <AdminMembershipsAdditionForm
          client:load
          currentPluginIndex={props.clubs.currentPluginIndex}
          membership={membership}
          presets={props.presets as Membership[]}
          existingMemberships={props.memberships as Membership[]}
          rpcUrl={props.rpcUrl as string}
          base={baseUrl}
        />
      </section>
      <input id="siteName" hidden value={site} disabled />
    </SetupLayout>
  ) : (
    <PageNotFound
      redirectionCtaText={`Take me back to previous page `}
      redirectionCtaUrl={siteBaseUrl}
    />
  )
}

<script>
  import { ClubsEvents } from '@devprotocol/clubs-core'

  const site =
    window.location.pathname.split('/')[1] ||
    (document.getElementById('siteName') as HTMLInputElement)?.value

  document.body.addEventListener(ClubsEvents.FinishConfiguration, () => {
    console.log('Save button clicked and updated the data remotely!!')
    window.location.href = new URL(
      `${site}/setup/memberships?created`,
      `${location.protocol}//${location.host}`
    ).toString()
  })
</script>
