---
import {
  type ClubsConfiguration,
  decode,
  pageFactory,
  ClubsPluginSignal,
  type ClubsPropsPages,
  type ClubsFunctionFactoryOptions,
  type ClubsFunctionPageFactoryResult,
  type ClubsGetStaticPathsItem,
  routerFactory,
} from '@devprotocol/clubs-core'
import { config as _config } from '@fixtures/config'
import PageNotFound from '@pages/404.astro'
import { plugins } from '@constants/plugins'
import ConnectButton from '@components/Wallet/ConnectButton.vue'
import type { DraftOptions } from '@constants/draft'
import PreviewBanner from '@components/PreviewBanner/PreviewBanner.astro'
import Footer from '@components/Footer/Footer.astro'
import { replaceWithFwdHost } from '@fixtures/url'
import type { InferGetStaticPropsType } from 'astro'
import Clarity from '@components/Clarity/Clarity.astro'
import type { UndefinedOr } from '@devprotocol/util-ts'

const { site, page } = Astro.params
const config = await _config(site)

const options = {
  config: () => Promise.resolve(config),
  plugins,
} satisfies ClubsFunctionFactoryOptions

const { getStaticPaths } = pageFactory(
  options,
) as ClubsFunctionPageFactoryResult<typeof options>
const router = routerFactory(await getStaticPaths(), (p) => p.params.page)
const path = router(page) as UndefinedOr<
  ClubsGetStaticPathsItem<InferGetStaticPropsType<typeof getStaticPaths>>
>

const Layout = path?.props.layout
const Content = path?.props.component

const siteBaseUrl = new URL(replaceWithFwdHost(Astro.request)).origin

const decodedConfig = decode<ClubsConfiguration>(config)
const draftOptions = decodedConfig?.options?.find(
  (option) => option.key === '__draft',
)?.value as DraftOptions['value']
const isInDraft = Boolean(draftOptions?.isInDraft)
const fullPage = (path?.props.signals as undefined | string[])?.includes(
  ClubsPluginSignal.DisplayFullPage,
)
---

{
  path && Layout && Content ? (
    <>
      <Layout {...path.props}>
        <span slot="clubs:connect-button">
          <ConnectButton
            client:load
            chainId={decodedConfig.chainId}
            isDisabled={isInDraft}
          />
        </span>

        <Content {...path.props} />

        <PreviewBanner config={decode<ClubsConfiguration>(config)} />

        <Clarity />
      </Layout>

      <Footer {...(path.props as unknown as ClubsPropsPages)} {fullPage}>
        <span slot="page:footer:legal-link">
          Terms and Conditions (
          <a
            href="https://github.com/dev-protocol/legal/blob/main/TERMS-OF-USE-MEMBERS.md"
            target="_blank"
            rel="noopener"
          >
            English
          </a>
          ,
          <a
            href="https://github.com/dev-protocol/legal/blob/main/TERMS-OF-USE-MEMBERS-JA.md"
            target="_blank"
            rel="noopener"
          >
            日本語
          </a>
          )
        </span>
        <span slot="page:footer:legal-link">
          Privacy policy (
          <a
            href="https://github.com/dev-protocol/legal/blob/main/PRIVACY-POLICY.md"
            target="_blank"
            rel="noopener"
          >
            English
          </a>
          ,
          <a
            href="https://github.com/dev-protocol/legal/blob/main/PRIVACY-POLICY-JA.md"
            target="_blank"
            rel="noopener"
          >
            日本語
          </a>
          )
        </span>
      </Footer>
    </>
  ) : (
    <PageNotFound
      redirectionCtaText={`Take me back ${site} homepage`}
      redirectionCtaUrl={siteBaseUrl}
    />
  )
}
