---
import { Admin } from '@devprotocol/clubs-core/layouts'
import {
  type ClubsConfiguration,
  adminFactory,
  decode,
  ClubsSlotName,
  type ClubsFunctionFactoryOptions,
  type ClubsFunctionAdminFactoryResult,
  type ClubsGetStaticPathsItem,
  routerFactory,
} from '@devprotocol/clubs-core'
import { config as _config } from '@fixtures/config'
import PageNotFound from '@pages/404.astro'
import admin from '@plugins/admin'
import marketplace from '@plugins/marketplace'
import IconGlobe from '@components/Icons/globe-europe-africa.astro'
import IconBanknotes from '@components/Icons/banknotes.astro'
import Banner from '@components/Global/Banner.astro'
import { plugins } from '@constants/plugins'
import ConnectButton from '@components/Wallet/ConnectButton.vue'
import PreviewBanner from '@components/PreviewBanner/PreviewBanner.astro'
import { replaceWithFwdHost } from '@fixtures/url'
import type { InferGetStaticPropsType } from 'astro'
import Clarity from '@components/Clarity/Clarity.astro'

const { site, page } = Astro.params

const options = {
  config: async () => await _config(site),
  plugins: [admin, marketplace, ...plugins],
} satisfies ClubsFunctionFactoryOptions

const { getStaticPaths } = adminFactory(
  options,
) as ClubsFunctionAdminFactoryResult<typeof options>

const router = routerFactory(await getStaticPaths(), (p) => p.params.page)
const _path = router(page)

const path = {
  ..._path,
  props: {
    ..._path?.props,
    clubs: {
      ..._path?.props.clubs,
      plugins: _path?.props.clubs.plugins.filter(
        (p) => p.id !== 'devprotocol:clubs:clubsx:marketplace',
      ),
    },
  },
} as ClubsGetStaticPathsItem<InferGetStaticPropsType<typeof getStaticPaths>>

const config =
  path.props.clubs.encodedClubsConfiguration &&
  decode(path.props.clubs.encodedClubsConfiguration)

const Content = path?.props.component

const baseUrl = ((origin) =>
  Astro.params.site && origin.includes(Astro.params.site)
    ? origin.replace(`${Astro.params.site}.`, '')
    : origin)(new URL(replaceWithFwdHost(Astro.request)).origin)

const siteBaseUrl = new URL(replaceWithFwdHost(Astro.request)).origin
---

{
  path && Content ? (
    <>
      <Admin {...path.props}>
        <Banner slot={ClubsSlotName.AdminBodyBeforeContents} />
        <ConnectButton
          client:load
          chainId={(config as ClubsConfiguration | undefined)?.chainId}
          slot="clubs:connect-button"
        />
        <a
          slot="admin:sidebar:before-title"
          class="flex items-center gap-2 transition-colors hover:text-native-blue-300"
          href={`${baseUrl}/signin`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-4 w-4"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M19.5 12h-15m0 0l6.75 6.75M4.5 12l6.75-6.75"
            />
          </svg>
          Projects
        </a>
        <a
          slot="admin:sidebar:before-title"
          class="flex items-center gap-2 transition-colors hover:text-native-blue-300"
          target="_blank"
          rel="noopener norefferer"
          href={siteBaseUrl}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-4 w-4"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3"
            />
          </svg>
          Club page
        </a>
        <li slot="admin:sidebar:before-theme-link">
          <a
            class:list={[
              '-mx-3 flex items-center gap-2 rounded p-3 font-bold transition-colors duration-500',
              page?.startsWith('marketplace')
                ? 'bg-[var(--hs-theme-disabled)]'
                : 'hover:bg-[var(--hs-theme-disabled)]',
            ]}
            href="/admin/marketplace"
          >
            <span class="text-[#D500E6]">
              <IconGlobe />
            </span>
            Marketplace
          </a>
        </li>
        <li slot="admin:sidebar:after-built-in-primary-links">
          <a
            class:list={[
              '-mx-3 flex items-center gap-2 rounded p-3 font-bold transition-colors duration-500',
              page?.startsWith('funds')
                ? 'bg-[var(--hs-theme-disabled)]'
                : 'hover:bg-[var(--hs-theme-disabled)]',
            ]}
            href="/admin/funds"
          >
            <span class="text-[#FF3815]">
              <IconBanknotes />
            </span>
            Funds
          </a>
        </li>

        <div
          data-show-navigation="false"
          class="group-data-[show-navigation=true]:hidden"
        >
          <Content {...path.props} />
          <div id="config-container" data-config={JSON.stringify(config)} />
        </div>
        <div id="non-admin-message" />
        <PreviewBanner
          inAdmin={true}
          config={config as ClubsConfiguration}
          slot={ClubsSlotName.AdminBodyAfterContents}
        />
        <Clarity />
      </Admin>
    </>
  ) : (
    <PageNotFound
      redirectionCtaText={`Take me back ${site} homepage`}
      redirectionCtaUrl={`${
        new URL(replaceWithFwdHost(Astro.request)).origin
      }/admin/overview`}
    />
  )
}

<script>
  import { type ethers, JsonRpcProvider } from 'ethers'
  import type { connection as Connection } from '@devprotocol/clubs-core/connection'
  import type { DraftOptions } from '@constants/draft'
  import { decode, onSubmitConfig, isAdmin } from '@devprotocol/clubs-core'
  import { onMountClient } from '@devprotocol/clubs-core'
  import { hashMessage } from 'ethers'
  import { type ClubsConfiguration } from '@devprotocol/clubs-core'

  let connection: typeof Connection
  let signer: ethers.Signer | undefined
  let currentAddress: string | undefined

  onMountClient(async () => {
    const _connection = await import('@devprotocol/clubs-core/connection')
    connection = _connection.connection
    connection().signer.subscribe((s) => {
      signer = s
    })
    connection().account.subscribe((a) => {
      currentAddress = a
      console.log('currentAddress', currentAddress)
    })
  })
  async function waitForCurrentAddress() {
    return new Promise((resolve, reject) => {
      const interval = setInterval(() => {
        if (currentAddress !== undefined) {
          clearInterval(interval)
          resolve(currentAddress)
        }
      }, 100) // Check every 100ms, adjust as needed

      // Optionally, timeout to reject the promise if it takes too long
      const timeout = setTimeout(() => {
        clearInterval(interval)
        reject(new Error('Timeout waiting for currentAddress'))
      }, 5000) // Timeout after 5000ms, adjust as needed
    })
  }
  async function handleAccessDenied() {
    let targetDiv = document.getElementById('non-admin-message')
    if (targetDiv) {
      targetDiv.innerHTML =
        "<p>ðŸš€ Whoops! It looks like you've stumbled into a secret space mission reserved for our Club Admins! While we appreciate your adventurous spirit, this area is off-limits to non-admin explorers. But don't worry, your own mission awaits back on familiar territory. Click <u><a href='https://clubs.place/domain'>here</a></u> to create your own club. Your future club might become the shining star that guides others to their own club-creating journey! ðŸŒŸ Keep exploring and may the stars align for your club-building adventure!</p>"
    }
    console.error('Error: Access denied or error fetching data')
  }

  document.addEventListener('DOMContentLoaded', () => {
    const dataTypeValue = document.body.getAttribute('data-page')
    console.log('dataTypeValue:', dataTypeValue)
    const mainContainer = document.getElementById('__clubs:main-container__')
    const configContainer = document.getElementById('config-container')
    let config: ClubsConfiguration | undefined
    if (configContainer) {
      config = JSON.parse(
        configContainer?.dataset?.config as string,
      ) as ClubsConfiguration
    } else {
      console.error('configContainer not found')
    }
    if (
      mainContainer &&
      config?.adminPageVisibility &&
      dataTypeValue !== 'marketplace'
    ) {
      mainContainer.dataset.showNavigation = 'true'
      let targetDiv = document.getElementById('non-admin-message')
      if (targetDiv) {
        targetDiv.innerHTML = '<p>Please wait...</p>'
      }
    } else {
      console.error('Error: Access denied or error fetching data')
    }
    async function fetchDataAndProcess() {
      try {
        if (config && config?.adminPageVisibility) {
          try {
            await waitForCurrentAddress()
            const address = currentAddress as string
            const provider = new JsonRpcProvider(config?.rpcUrl)
            const access = await isAdmin({
              address: address,
              previousConfiguration: config,
              provider: provider,
            })
            console.log('access:', access)
            if (mainContainer && access) {
              mainContainer.dataset.showNavigation = 'false'
            } else {
              handleAccessDenied()
            }
          } catch (error) {
            console.error(error)
            handleAccessDenied()
          }
        }
      } catch (error) {
        console.error('Error fetching data:', error)
      }
    }
    fetchDataAndProcess()
  })

  onSubmitConfig(async (data, onFinish) => {
    const splitHostname = window.location.hostname.split('.')
    const site = splitHostname[0]

    if (!currentAddress || !signer) {
      return onFinish({
        success: false,
        error: new Error('Please connect your wallet first'),
      })
    }

    const hash = hashMessage(data)
    let sig: string
    try {
      sig = await signer.signMessage(hash)
    } catch (error: any) {
      return onFinish({
        success: false,
        error: new Error(
          error?.message?.includes('user rejected signing')
            ? 'Wallet confirmation denied'
            : 'Transaction failed',
        ),
      })
    }

    if (!sig) {
      return onFinish({
        success: false,
        error: new Error('Wallet confirmation missing'),
      })
    }

    const body = {
      site,
      config: data,
      hash,
      sig,
      expectedAddress: currentAddress,
    }

    const isInDraft = Boolean(
      (
        decode(data).options?.find((option) => option.key === '__draft')
          ?.value as DraftOptions['value']
      )?.isInDraft,
    )

    const res = await fetch(
      isInDraft ? '/api/updateDraftConfig' : '/api/updateConfig',
      {
        method: 'POST',
        body: JSON.stringify(body),
      },
    )

    const success = Boolean(res?.ok)
    const error = success
      ? undefined
      : new Error(await res.json().then((r) => r.error))
    onFinish({ success, error })
  })
</script>
