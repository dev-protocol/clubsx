---
import DefaultLayout from '@layouts/Default.astro'
import { Admin } from '@devprotocol/clubs-core/layouts'
import {
  type ClubsConfiguration,
  adminFactory,
  decode,
} from '@devprotocol/clubs-core'
import { config as _config } from '@fixtures/config'
import VercelAnalytics from '@components/Analytics/VercelAnalytics.astro'
import PageNotFound from '@pages/404.astro'
import admin from '@plugins/admin'
import marketplace from '@plugins/marketplace'
import IconGlobe from '@components/Icons/globe-europe-africa.astro'
import Banner from '@components/Global/Banner.astro'
import { plugins } from '@constants/plugins'
import ConnectButton from '@components/Wallet/ConnectButton.vue'

const { site, page } = Astro.params

const { getStaticPaths } = adminFactory({
  config: async () => await _config(site),
  plugins: [admin, marketplace, ...plugins],
})
const _path = (await getStaticPaths()).find(
  ({ params }) => params.page === page,
)
const path = {
  ..._path,
  props: {
    ..._path?.props,
    clubs: {
      ..._path?.props.clubs,
      plugins: _path?.props.clubs.plugins.filter(
        (p) => p.id !== 'devprotocol:clubs:clubsx:marketplace',
      ),
    },
  },
}
const config =
  path.props.clubs.encodedClubsConfiguration &&
  decode(path.props.clubs.encodedClubsConfiguration)

const Content = path?.props.component

const baseUrl = ((origin) =>
  Astro.params.site && origin.includes(Astro.params.site)
    ? origin.replace(`${Astro.params.site}.`, '')
    : origin)(new URL(Astro.request.url).origin)

const siteBaseUrl = new URL(Astro.request.url).origin
---

<DefaultLayout
  {...path?.props ?? {}}
  config={config}
  footer={false}
  inAdmin={true}
>
  {
    path && Content ? (
      <>
        <Banner />
        <Admin {...path.props}>
          <ConnectButton
            client:load
            chainId={(config as ClubsConfiguration | undefined)?.chainId}
            slot="clubs:connect-button"
          />
          <a
            slot="admin:sidebar:before-title"
            class="flex items-center gap-2 transition-colors hover:text-native-blue-300"
            href={`${baseUrl}/signin`}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="h-4 w-4"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M19.5 12h-15m0 0l6.75 6.75M4.5 12l6.75-6.75"
              />
            </svg>
            Projects
          </a>
          <a
            slot="admin:sidebar:before-title"
            class="flex items-center gap-2 transition-colors hover:text-native-blue-300"
            target="_blank"
            rel="noopener norefferer"
            href={siteBaseUrl}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="h-4 w-4"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3"
              />
            </svg>
            Club page
          </a>
          <li slot="admin:sidebar:before-theme-link">
            <a
              class:list={[
                '-mx-3 flex items-center gap-2 rounded p-3 font-bold transition-colors duration-500',
                page?.startsWith('marketplace')
                  ? 'bg-surface-200'
                  : 'hover:bg-surface-200',
              ]}
              href="/admin/marketplace"
            >
              <span class="text-[#D500E6]">
                <IconGlobe />
              </span>
              Marketplace
            </a>
          </li>

          <Content {...path.props} />
          <VercelAnalytics />
        </Admin>
      </>
    ) : (
      <PageNotFound
        redirectionCtaText={`Take me back ${site} homepage`}
        redirectionCtaUrl={`${
          new URL(Astro.request.url).origin
        }/admin/overview`}
      />
    )
  }
</DefaultLayout>

<script>
  import type { ethers } from 'ethers'
  import type { connection as Connection } from '@devprotocol/clubs-core/connection'
  import type { DraftOptions } from '@constants/draft'
  import { decode, onSubmitConfig } from '@devprotocol/clubs-core'
  import { onMountClient } from '@devprotocol/clubs-core/events'
  import { hashMessage } from 'ethers'

  let connection: typeof Connection
  let signer: ethers.Signer | undefined
  let currentAddress: string | undefined

  onMountClient(async () => {
    const _connection = await import('@devprotocol/clubs-core/connection')
    connection = _connection.connection
    connection().signer.subscribe((s) => {
      signer = s
    })
    connection().account.subscribe((a) => {
      currentAddress = a
    })
  })

  onSubmitConfig(async (data, onFinish) => {
    const splitHostname = window.location.hostname.split('.')
    const site = splitHostname[0]

    if (!currentAddress || !signer) {
      return onFinish({
        success: false,
        error: new Error('Please connect your wallet first'),
      })
    }

    const hash = hashMessage(data)
    let sig: string
    try {
      sig = await signer.signMessage(hash)
    } catch (error: any) {
      return onFinish({
        success: false,
        error: new Error(
          error?.message?.includes('user rejected signing')
            ? 'Wallet confirmation denied'
            : 'Transaction failed',
        ),
      })
    }

    if (!sig) {
      return onFinish({
        success: false,
        error: new Error('Wallet confirmation missing'),
      })
    }

    const body = {
      site,
      config: data,
      hash,
      sig,
      expectedAddress: currentAddress,
    }

    const isInDraft = Boolean(
      (
        decode(data).options?.find((option) => option.key === '__draft')
          ?.value as DraftOptions['value']
      )?.isInDraft,
    )

    const res = await fetch(
      isInDraft ? '/api/updateDraftConfig' : '/api/updateConfig',
      {
        method: 'POST',
        body: JSON.stringify(body),
      },
    )

    const success = Boolean(res?.ok)
    const error = success
      ? undefined
      : new Error(await res.json().then((r) => r.error))
    onFinish({ success, error })
  })
</script>
