---
import '@devprotocol/clubs-core/styles'
import { ClubsPictogramAdaptable as Favicon } from '@devprotocol/clubs-core/images'
import WelcomeWizard from '@components/WelcomeWizard/WelcomeWizard.svelte'
import type {
  ClubsConfiguration,
  ClubsPropsAdminPages,
} from '@devprotocol/clubs-core'
import {
  AdminConfigurationManager,
  Aside,
} from '@devprotocol/clubs-core/layouts'
import type { UndefinedOr } from '@devprotocol/util-ts'
import type { DraftOptions } from '@constants/draft'
import Banner from '@components/Global/Banner.astro'
import { ConnectButton } from '@devprotocol/clubs-plugin-awesome-onboarding'

const { site } = Astro.params

const {
  config,
  setupStep,
  clubs,
  aside = true,
  title,
} = Astro.props as {
  config: ClubsConfiguration
  setupStep: 'DESIGN' | 'MEMBERSHIPS' | 'PREVIEW' | 'BASIC' | 'PUBLISH'
  clubs: ClubsPropsAdminPages['clubs']
  aside?: boolean
  title?: string
}
const steps = {
  current:
    setupStep === 'BASIC'
      ? 1
      : setupStep === 'DESIGN'
        ? 2
        : setupStep === 'MEMBERSHIPS'
          ? 3
          : setupStep === 'PREVIEW'
            ? 4
            : 5,
  total: 5,
}

// Check that config is in draft and has a uid.
const isInDraftWithFirebase = Boolean(
  (
    config.options?.find(
      (x) => x.key === '__draft',
    ) as UndefinedOr<DraftOptions>
  )?.value.isInDraft &&
    (
      config.options?.find(
        (x) => x.key === '__draft',
      ) as UndefinedOr<DraftOptions>
    )?.value.uid,
)

const avatarImgSrc: string | undefined = config.options?.find(
  (option) => option.key === 'avatarImgSrc',
)?.value as string
---

<!doctype html>
<html class="dark" lang="en" hashi-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg" href={Favicon.src} />
    <title>{title ?? 'Setup Clubs'}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />
    <link rel="icon" type="image/svg" href={avatarImgSrc || Favicon.src} />
  </head>

  <body class="bg-dp-blue-grey-300 font-body text-white">
    <Banner />
    <div
      class="grid min-h-screen gap-20 lg:mr-20 lg:auto-cols-[18rem_minmax(auto,_1fr)_12rem] lg:grid-flow-col"
    >
      <header
        id="__clubs:setup:header__"
        class="fixed z-50 hidden max-h-screen min-h-screen w-full content-start gap-16 overflow-y-scroll bg-dp-blue-grey-400 lg:relative lg:block lg:max-h-fit lg:overflow-y-auto"
      >
        <!-- TODO: replace this default '' value for site prop in welcome wizard -->
        <WelcomeWizard step={setupStep} site={site || ''} />
        <button
          id="__clubs:setup:sidebar-close__"
          class="fixed bottom-[3rem] left-1/2 flex aspect-square w-14 -translate-x-1/2 items-center justify-center rounded-full bg-white text-dp-white-ink shadow-2xl lg:hidden"
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-6 w-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </header>

      <main class="container mx-auto px-2 py-8 lg:px-0 lg:py-16">
        <slot />
      </main>
      {
        aside && (
          <div class="container mx-auto px-2 py-8 lg:px-0 lg:py-16">
            <Aside config={config} showConnectButton={!isInDraftWithFirebase}>
              <ConnectButton slot="aside:connect-button" />
              <slot name="aside:after-built-in-buttons" />
            </Aside>
          </div>
        )
      }
    </div>

    <!-- Navigation bar for mobile -->
    <div
      id="__clubs:setup:nav-mobile__"
      class="fixed bottom-[3rem] left-1/2 -translate-x-1/2 transition-all duration-300 ease-in-out lg:hidden"
    >
      <button
        id="__clubs:setup:sidebar-open__"
        class="flex items-center gap-3 rounded-full bg-white px-3 py-2 text-dp-white-ink shadow-2xl"
      >
        <div class="ml-2 flex items-stretch gap-2">
          <span class="font-bold">Step {steps.current}</span><span
            class="text-dp-white-600">/{steps.total}</span
          >
        </div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="box-content h-6 w-6 rounded-full border p-2"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12"></path>
        </svg>
      </button>
    </div>
    <input id="setupStep" hidden value={setupStep} />
    <input id="encodedConfig" hidden value={clubs.encodedClubsConfiguration} />
    <input id="siteName" hidden value={site} disabled />
    <AdminConfigurationManager {clubs} />
    <script>
      import type { DraftOptions } from '@constants/draft'
      import { decode, onSubmitConfig } from '@devprotocol/clubs-core'
      import { connection } from '@devprotocol/clubs-core/connection'
      import type { UndefinedOr } from '@devprotocol/util-ts'
      import { instanceStore } from '@fixtures/firebase/clientInstance'
      import { GetModalProvider, EthersProviderFrom } from '@fixtures/wallet'
      import type { Auth } from 'firebase/auth'

      const siteName = (document.getElementById('siteName') as HTMLInputElement)
        ?.value
      const setupStep = (
        document.getElementById('setupStep') as HTMLInputElement
      )?.value

      const getNextStepPath = () => {
        const splitHostname = window.location.pathname.split('/')
        const site = splitHostname[1] || siteName

        switch (setupStep) {
          case 'HOME':
            return `/${site}/setup/memberships`

          case 'MEMBERSHIPS':
            return `/${site}/setup/preview`

          case 'PLUGINS':
            return `/${site}/setup/congratulations`
        }
      }

      const nextStepPath = getNextStepPath()

      const config = (
        document.getElementById('encodedConfig') as HTMLInputElement
      ).value

      const decodedConfig = decode(config)
      console.log({ decodedConfig })
      const isInDraftWithFirebase = Boolean(
        (
          decodedConfig.options?.find(
            (x) => x.key === '__draft',
          ) as UndefinedOr<DraftOptions>
        )?.value.isInDraft &&
          (
            decodedConfig.options?.find(
              (x) => x.key === '__draft',
            ) as UndefinedOr<DraftOptions>
          )?.value.uid,
      )

      const auth: Auth = instanceStore.initializedApp
      auth.onAuthStateChanged((user) => {
        if (user) {
          // TODO: show loading page until this happens.
        } else {
          // TODO: show that club was setup but signup failed when this happens.
        }
      })

      onSubmitConfig(async (data, onFinish) => {
        const splitHostname = window.location.pathname.split('/')
        const site = splitHostname[1] || siteName

        let body: {
          site: string
          config: string
          hash?: string
          sig?: string
        } = {
          site,
          config: data,
        }

        const headers: { 'Content-Type': string; Authorization?: string } = {
          'Content-Type': 'application/json',
        }

        if (!isInDraftWithFirebase) {
          const modalProvider = GetModalProvider()
          const { provider, currentAddress } =
            await EthersProviderFrom(modalProvider)
          if (!currentAddress || !provider) {
            onFinish({ success: false })
            return
          }
          const signer = await provider.getSigner()
          connection().signer.next(signer)

          const hash = `Setup ${site} @ts:${new Date().getTime()}`
          let sig: string
          try {
            sig = await signer.signMessage(hash)
          } catch (error) {
            onFinish({ success: false })
            return
          }

          if (!sig) {
            onFinish({ success: false })
            return
          }

          // Update the request body to use hash and sig. Keeping headers the same.
          body['hash'] = hash
          body['sig'] = sig
        } else {
          // If in else, then we are using firebase.
          if (!auth || !auth.currentUser) {
            onFinish({ success: false })
            return
          }

          const jwtTokenId = await auth.currentUser.getIdToken()
          // Update the headers to use jwt authentication keeping body the same.
          headers['Authorization'] = `Bearer ${jwtTokenId}`
        }

        const res = await fetch('/api/updateDraftConfig', {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(body),
        })

        const success = res.ok
        onFinish({ success })

        if (
          window.location.pathname.startsWith(`/${site}/setup/memberships/new`)
        ) {
          return
        }

        // navigate to next step
        if (success && nextStepPath) {
          window.location.href = nextStepPath
        }
      })
    </script>

    <script>
      const header = document.getElementById('__clubs:setup:header__')
      const navMobile = document.getElementById('__clubs:setup:nav-mobile__')
      document
        .getElementById('__clubs:setup:sidebar-open__')
        ?.addEventListener('click', () => {
          header?.classList.toggle('hidden')
        })

      document
        .getElementById('__clubs:setup:sidebar-close__')
        ?.addEventListener('click', () => {
          header?.classList.toggle('hidden')
        })

      let lastKnownScrollPosition = 0
      let timer: NodeJS.Timeout

      const toggleNavMobile = (scrollPos: number) => {
        const shown =
          navMobile?.classList.contains('nav-mobile--hide') === false
        const update =
          (shown && scrollPos > lastKnownScrollPosition) ||
          (!shown && scrollPos < lastKnownScrollPosition)
        if (update) navMobile?.classList.toggle('nav-mobile--hide')
        lastKnownScrollPosition = scrollPos
      }

      const onScroll = () => {
        if (timer) clearTimeout(timer)
        timer = setTimeout(() => toggleNavMobile(window.scrollY), 80)
      }

      const onInit = () => {
        if (window.innerWidth < 1024) {
          document.addEventListener('scroll', onScroll)
        } else {
          document.removeEventListener('scroll', onScroll)
        }
      }

      window.addEventListener('resize', onInit)
      document.addEventListener('DOMContentLoaded', onInit)
    </script>

    <style>
      .nav-mobile--hide {
        bottom: -5rem;
      }
    </style>
  </body>
</html>
