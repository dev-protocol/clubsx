---
import '@devprotocol/clubs-core/styles'
import WelcomeWizard from '@components/WelcomeWizard/WelcomeWizard.svelte'
import type {
  ClubsConfiguration,
  ClubsPropsAdminPages,
} from '@devprotocol/clubs-core'
import Aside from '@devprotocol/clubs-core/aside'
import { AdminConfigurationManager } from '@devprotocol/clubs-core/layouts'

const { config, setupStep, clubs } = Astro.props as {
  config: ClubsConfiguration
  setupStep: 'DESIGN' | 'MEMBERSHIPS' | 'PREVIEW' | 'BASIC' | 'PUBLISH'
  clubs: ClubsPropsAdminPages['clubs']
}
---

<!DOCTYPE html>
<html class="dark" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />
  </head>

  <body class="bg-dp-blue-grey-300 font-body text-white">
    <div
      class="mr-20 grid min-h-screen auto-cols-[18rem_minmax(auto,_1fr)_12rem] grid-flow-col gap-20"
    >
      <WelcomeWizard step={setupStep} />

      <main class="container mx-auto py-16">
        <slot />
      </main>
      <div class="py-16">
        <Aside
          class="col-span-1"
          class="col-span-1"
          config={config}
          client:load
        />
      </div>
    </div>
  </body>

  <input id="setupStep" hidden value={setupStep} />
  <AdminConfigurationManager {clubs} />
</html>

<script>
  import { onSubmitConfig } from '@devprotocol/clubs-core'
  import { GetModalProvider, EthersProviderFrom } from '@fixtures/wallet'
  import { utils } from 'ethers'

  const setupStep = (document.getElementById('setupStep') as HTMLInputElement)
    ?.value

  const getNextStepPath = () => {
    switch (setupStep) {
      case 'HOME':
        return '/setup/memberships'

      case 'MEMBERSHIPS':
        return '/setup/preview'

      case 'PLUGINS':
        return '/setup/congratulations'
    }
  }

  const nextStepPath = getNextStepPath()

  onSubmitConfig(async (data, onFinish) => {
    const splitHostname = window.location.hostname.split('.')
    const site = splitHostname[0]

    const modalProvider = GetModalProvider()
    const { provider, currentAddress } = await EthersProviderFrom(modalProvider)
    if (!currentAddress || !provider) {
      return
    }
    const signer = provider.getSigner()

    const hash = await utils.hashMessage(data)
    const sig = await signer.signMessage(hash)
    if (!sig) {
      return
    }

    const body = {
      site,
      config: data,
      hash,
      sig,
      expectedAddress: currentAddress,
    }

    const res = await fetch('/api/updateConfig', {
      method: 'POST',
      body: JSON.stringify(body),
    })

    const success = res.ok
    onFinish({ success })

    if (window.location.pathname.startsWith('/setup/memberships/new')) {
      return
    }

    // navigate to next step
    if (success && nextStepPath) {
      window.location.href = nextStepPath
    }
  })
</script>
