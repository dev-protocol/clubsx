---
import '@devprotocol/clubs-core/styles'
import WelcomeWizard from '@components/WelcomeWizard/WelcomeWizard.svelte'
import type {
  ClubsConfiguration,
  ClubsPropsAdminPages,
} from '@devprotocol/clubs-core'
import Aside from '@devprotocol/clubs-core/aside'
import { AdminConfigurationManager } from '@devprotocol/clubs-core/layouts'
import { UndefinedOr } from '@devprotocol/util-ts'
import { DraftOptions } from '@constants/draft'

const {
  config,
  setupStep,
  clubs,
  aside = true,
} = Astro.props as {
  config: ClubsConfiguration
  setupStep: 'DESIGN' | 'MEMBERSHIPS' | 'PREVIEW' | 'BASIC' | 'PUBLISH'
  clubs: ClubsPropsAdminPages['clubs']
  aside?: boolean
}
const steps = {
  current:
    setupStep === 'BASIC'
      ? 1
      : setupStep === 'DESIGN'
      ? 2
      : setupStep === 'MEMBERSHIPS'
      ? 3
      : setupStep === 'PREVIEW'
      ? 4
      : 5,
  total: 5,
}

const isInDraftWithFirebase = Boolean(
  (
    config.options?.find(
      (x) => x.key === '__draft'
    ) as UndefinedOr<DraftOptions>
  )?.value.uid
)
---

<!DOCTYPE html>
<html class="dark" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />
  </head>

  <body class="bg-dp-blue-grey-300 font-body text-white">
    <div
      class="grid min-h-screen gap-20 lg:mr-20 lg:auto-cols-[18rem_minmax(auto,_1fr)_12rem] lg:grid-flow-col"
    >
      <header
        id="__clubs:setup:header__"
        class="fixed z-50 hidden max-h-screen min-h-screen w-full content-start gap-16 overflow-y-scroll bg-dp-blue-grey-400 lg:relative lg:block lg:max-h-fit lg:overflow-y-auto"
      >
        <WelcomeWizard step={setupStep} />
        <button
          id="__clubs:setup:sidebar-close__"
          class="fixed left-1/2 bottom-[3rem] flex aspect-square w-14 -translate-x-1/2 items-center justify-center rounded-full bg-white text-dp-white-ink shadow-2xl lg:hidden"
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-6 w-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </header>

      <main class="container mx-auto px-2 py-8 lg:px-0 lg:py-16">
        <slot />
      </main>
      {
        aside && (
          <div class="container mx-auto px-2 py-8 lg:px-0 lg:py-16">
            <Aside
              class="col-span-1"
              class="col-span-1"
              config={config}
              showConnectButton={!isInDraftWithFirebase}
              client:load
            />
          </div>
        )
      }
    </div>

    <!-- Navigation bar for mobile -->
    <div
      id="__clubs:setup:nav-mobile__"
      class="fixed bottom-[3rem] left-1/2 -translate-x-1/2 transition-all duration-300 ease-in-out lg:hidden"
    >
      <button
        id="__clubs:setup:sidebar-open__"
        class="flex items-center gap-3 rounded-full bg-white py-2 px-3 text-dp-white-ink shadow-2xl"
      >
        <div class="ml-2 flex items-stretch gap-2">
          <span class="font-bold">Step {steps.current}</span><span
            class="text-dp-white-600">/{steps.total}</span
          >
        </div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="box-content h-6 w-6 rounded-full border p-2"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12"></path>
        </svg>
      </button>
    </div>
  </body>

  <input id="setupStep" hidden value={setupStep} />
  <input id="encodedConfig" hidden value={clubs.encodedClubsConfiguration} />
  <AdminConfigurationManager {clubs} />
</html>

<script>
  import { decode } from '@devprotocol/clubs-core'

  const config = (document.getElementById('encodedConfig') as HTMLInputElement)
    .value
  console.log('ClubsConfiguration', decode(config))
</script>

<script>
  import { onSubmitConfig } from '@devprotocol/clubs-core'
  import { GetModalProvider, EthersProviderFrom } from '@fixtures/wallet'
  import { utils } from 'ethers'

  const setupStep = (document.getElementById('setupStep') as HTMLInputElement)
    ?.value

  const getNextStepPath = () => {
    switch (setupStep) {
      case 'HOME':
        return '/setup/memberships'

      case 'MEMBERSHIPS':
        return '/setup/preview'

      case 'PLUGINS':
        return '/setup/congratulations'
    }
  }

  const nextStepPath = getNextStepPath()

  onSubmitConfig(async (data, onFinish) => {
    const splitHostname = window.location.hostname.split('.')
    const site = splitHostname[0]

    const modalProvider = GetModalProvider()
    const { provider, currentAddress } = await EthersProviderFrom(modalProvider)
    if (!currentAddress || !provider) {
      return
    }
    const signer = provider.getSigner()

    const hash = await utils.hashMessage(data)
    const sig = await signer.signMessage(hash)
    if (!sig) {
      return
    }

    const body = {
      site,
      config: data,
      hash,
      sig,
      expectedAddress: currentAddress,
    }

    const res = await fetch('/api/updateDraftConfig', {
      method: 'POST',
      body: JSON.stringify(body),
    })

    const success = res.ok
    onFinish({ success })

    if (window.location.pathname.startsWith('/setup/memberships/new')) {
      return
    }

    // navigate to next step
    if (success && nextStepPath) {
      window.location.href = nextStepPath
    }
  })
</script>

<script>
  const header = document.getElementById('__clubs:setup:header__')
  const navMobile = document.getElementById('__clubs:setup:nav-mobile__')
  document
    .getElementById('__clubs:setup:sidebar-open__')
    ?.addEventListener('click', () => {
      header?.classList.toggle('hidden')
    })

  document
    .getElementById('__clubs:setup:sidebar-close__')
    ?.addEventListener('click', () => {
      header?.classList.toggle('hidden')
    })

  let lastKnownScrollPosition = 0
  let timer: NodeJS.Timeout

  const toggleNavMobile = (scrollPos: number) => {
    const shown = navMobile?.classList.contains('nav-mobile--hide') === false
    const update =
      (shown && scrollPos > lastKnownScrollPosition) ||
      (!shown && scrollPos < lastKnownScrollPosition)
    if (update) navMobile?.classList.toggle('nav-mobile--hide')
    lastKnownScrollPosition = scrollPos
  }

  const onScroll = () => {
    if (timer) clearTimeout(timer)
    timer = setTimeout(() => toggleNavMobile(window.scrollY), 80)
  }

  const onInit = () => {
    if (window.innerWidth < 1024) {
      document.addEventListener('scroll', onScroll)
    } else {
      document.removeEventListener('scroll', onScroll)
    }
  }

  window.addEventListener('resize', onInit)
  document.addEventListener('DOMContentLoaded', onInit)
</script>

<style>
  .nav-mobile--hide {
    bottom: -5rem;
  }
</style>
