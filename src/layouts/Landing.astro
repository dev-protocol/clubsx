---
import ClubsColor from '@assets/clubs--color.svg'
import PolygonLogo from '@assets/polygon-logo.svg'

import ConnectButton from '@components/Wallet/ConnectButton.vue'
import CLBButton from 'node_modules/@devprotocol/clubs-core/src/ui/vue/CLBButton.vue'

import '@devprotocol/clubs-core/styles'

const { connectButton = 'show' } = Astro.props as {
  connectButton?: 'show' | 'hidden'
}

const title = 'Clubs'
const name = 'Clubs' // not sure the difference here compared to title
const description = ''
const url = ''
const ogURL = ''
const twitterHandle = 'devprtcl'
---

<!DOCTYPE html>
<html data-theme="light" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />
    <meta name="description" content={`${description}`} />
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:image" content={`${ogURL}`} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content={name} />
    <meta name="twitter:site" content={twitterHandle} />
    <meta name="twitter:creator" content={twitterHandle} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={`${ogURL}`} />
  </head>

  <body class="min-h-screen bg-dp-black-600 font-body text-white">
    <slot name="before-header" />
    <header
      class="relative flex items-center justify-between bg-dp-black-600 py-4 px-6"
    >
      <a href="/">
        <h1
          class="flex items-center gap-2.5 font-['Poppins'] text-xl font-bold text-dp-white-200"
        >
          <img src={ClubsColor} />Clubs
        </h1>
      </a>
      <slot name="right" />
      {
        connectButton === 'show' && (
          <nav class="flex justify-between gap-10">
            <ConnectButton type="black" client:load />
          </nav>
        )
      }
    </header>

    <main>
      <slot />
    </main>

    <footer class="clb-footer">
      <div class="clb-footer__wrapper">
        <div
          class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between"
        >
          <CLBButton link="#" type="outlined">Join the Waitlist</CLBButton>
          <div class="wrap-none flex flex-row items-center">
            <p class="text-lg font-bold md:text-lg">Clubs is powered by</p>
            <img src={PolygonLogo} alt="Polygon logo." />
          </div>
        </div>
        <div class="wrap my-6 flex flex-row gap-4">
          <div class="flex flex-col gap-2">
            <p class="font-bold">Community</p>
            <ul class="clb-footer__links">
              <li><a href="#">Discord</a></li>
              <li><a href="#">Medium</a></li>
              <li><a href="#">Twitter</a></li>
            </ul>
          </div>
          <div class="flex flex-col gap-2">
            <p class="font-bold">About</p>
            <ul class="clb-footer__links">
              <li><a href="#">Dev Protocol</a></li>
              <li><a href="#">Forums</a></li>
            </ul>
          </div>
        </div>
        <p>
          <small
            >Clubs build on Dev Protocol, the core of the Decentralized Creator
            Economy, completely on-chain and 100% composable middleware
            protocol.</small
          >
        </p>
      </div>
    </footer>
  </body>
</html>

<script>
  import { onSubmitConfig } from '@devprotocol/clubs-core'
  import { GetModalProvider, ReConnectWallet } from '@fixtures/wallet'
  import { utils } from 'ethers'
  import { onAuthStateChanged } from 'firebase/auth'
  import { initializeFirebase } from '../fixtures/firebase'

  const auth = initializeFirebase()
  let jwtIdToken: string | undefined

  onAuthStateChanged(auth, async (user) => {
    if (user) {
      // User is signed in, see docs for a list of available properties
      // https://firebase.google.com/docs/reference/js/firebase.User
      jwtIdToken = await user.getIdToken()
    } else {
      jwtIdToken = undefined
    }
  })

  onSubmitConfig(async (data, onFinish) => {
    const splitHostname = window.location.hostname.split('.')
    const site = splitHostname[0]

    const modalProvider = GetModalProvider()
    const { provider, currentAddress } = await ReConnectWallet(modalProvider)
    if (!currentAddress || !provider) {
      return
    }
    const signer = provider.getSigner()

    const hash = await utils.hashMessage(data)
    const sig = await signer.signMessage(hash)
    if (!sig) {
      return
    }

    const body = {
      site,
      config: data,
      hash,
      sig,
      jwtIdToken,
    }

    const res = await fetch('/api/updateDraftConfig', {
      method: 'POST',
      body: JSON.stringify(body),
    })

    const success = res.ok
    onFinish({ success })
  })
</script>

<style lang="scss" is:global>
  @use 'node_modules/@devprotocol/hashi/hs-button';

  html,
  body {
    scroll-behavior: smooth;
  }

  @include hs-button.extend('black') {
    @include hs-button.color(
      (
        ink: 'dp-black-600',
        border: 'dp-black-600',
      )
    );

    &:hover,
    &:focus {
      @include hs-button.color(
        (
          fill: 'dp-black-600',
          ink: 'dp-black-ink',
          border: 'dp-black-600',
        )
      );
    }

    &:active {
      @include hs-button.color(
        (
          fill: 'dp-black-400',
          ink: 'dp-black-ink',
          border: 'dp-black-400',
        )
      );
    }
  }

  .clb-footer {
    padding: 3rem 0;

    .clb-footer__wrapper {
      width: calc(100% - 50px);
      max-width: 1077px;
      margin: 0 auto;
    }

    .clb-footer__links {
      li a {
        transition: all var(--hs-transition-time) ease;

        &:hover,
        &:focus {
          background: rgba(#fff, 20%);
          text-decoration: underline;
        }

        &:active {
          background: rgba(#fff, 33%);
        }
      }
    }
  }
</style>
