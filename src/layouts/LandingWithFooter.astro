---
import { ClubsPictogramAdaptable as Favicon } from '@devprotocol/clubs-core/images'

import '@devprotocol/clubs-core/styles'
import Header from '@components/Global/Header.astro'
import Footer from '@components/Global/Footer.vue'
import Sessions from '@components/Global/Sessions.astro'
import Analytics from '@components/Analytics/Analytics.astro'

type Props = {
  connectButton?: 'show' | 'hidden'
  header?: 'show' | 'hidden'
  footer?: 'show' | 'hidden'
  fullwidth?: boolean
  theme?: 'light' | 'dark' | 'auto'
  pageTitle?: string
  og?: {
    image?: string
  }
}

const {
  connectButton = 'hidden',
  header = 'show',
  footer = 'show',
  theme = 'dark',
  fullwidth = false,
  pageTitle,
  og,
} = Astro.props

const title = 'CLUBS'
const name = 'CLUBS' // not sure the difference here compared to title
const description = 'Collection-based Social Platform'
const url = ''
const ogURL = og?.image ?? ''
const twitterHandle = 'poweredbyClubs'
---

<html lang="en" hashi-theme={theme === 'auto' ? undefined : theme}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg" href={Favicon.src} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin /><link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap"
      rel="stylesheet"
    />
    <meta name="description" content={`${description}`} />
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:image" content={`${ogURL}`} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content={name} />
    <meta name="twitter:site" content={twitterHandle} />
    <meta name="twitter:creator" content={twitterHandle} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={`${ogURL}`} />
  </head>

  <body
    class:list={[
      'relative flex flex-col max-w-full mx-auto bg-background font-body text-surface-ink',
      {
        'md:max-w-screen-sm': fullwidth === false,
      },
    ]}
  >
    <slot name="before-header" />
    {
      header === 'show' && (
        <Header connectButton={connectButton} pageTitle={pageTitle} />
      )
    }

    <main class="flex-grow overflow-y-auto md:overflow-y-visible">
      <slot />
    </main>

    {footer === 'show' && <Footer />}
  </body>

  <Sessions />
  <Analytics />
</html>

<script>
  import { onSubmitConfig } from '@devprotocol/clubs-core'
  import { GetModalProvider, ReConnectWallet } from '@fixtures/wallet'
  import { onAuthStateChanged } from 'firebase/auth'
  import { instanceStore } from '../fixtures/firebase/clientInstance'

  const auth = instanceStore.initializedApp
  let jwtIdToken: string | undefined

  onAuthStateChanged(auth, async (user) => {
    if (user) {
      // User is signed in, see docs for a list of available properties
      // https://firebase.google.com/docs/reference/js/firebase.User
      jwtIdToken = await user.getIdToken()
    } else {
      jwtIdToken = undefined
    }
  })

  onSubmitConfig(async (data, onFinish) => {
    const splitHostname = window.location.hostname.split('.')
    const site = splitHostname[0]

    const modalProvider = GetModalProvider()
    const { provider, currentAddress } = await ReConnectWallet(modalProvider)
    if (!currentAddress || !provider) {
      return
    }
    const signer = await provider.getSigner()

    const hash = `Update clubs config for ${site} @ts:${new Date().getTime()}`
    const sig = await signer.signMessage(hash)
    if (!sig) {
      return
    }

    const body = {
      site,
      config: data,
      hash,
      sig,
      jwtIdToken,
    }

    const res = await fetch('/api/updateDraftConfig', {
      method: 'POST',
      body: JSON.stringify(body),
    })

    const success = res.ok
    onFinish({ success })
  })
</script>
