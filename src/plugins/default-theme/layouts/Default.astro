---
import { ClubsConfiguration, ClubsPluginSignal } from '@devprotocol/clubs-core'
import type { UndefinedOr } from '@devprotocol/util-ts'
import '@devprotocol/clubs-core/styles'
import Header from '../components/Header/Header.astro'
import Hero from '../components/Hero/Hero.astro'
import type { NavLink } from '@constants/navLink'
import Navigation from '../components/Navigation/Navigation.astro'
import type { DraftOptions } from '@constants/draft'
import TokensInfo from '../components/Tokens/Info.svelte'

const { page } = Astro.params
const { metaTitle, config, homeConfig, globalConfig, signals } =
  Astro.props as {
    signals?: string[]
    metaTitle?: string
    config: ClubsConfiguration
    globalConfig?: {
      bg: string
      backgroundGradient?: [string, string]
    }
    homeConfig?: {
      hero: {
        image: string
      }
      description: string
      body: string
    }
  }

const displayFullPage = signals?.includes(ClubsPluginSignal.DisplayFullPage)

const { name, propertyAddress, rpcUrl, chainId } = config
const title = metaTitle ? `${config.name} : ${metaTitle}` : config.name

const ogp = config.options?.find((option) => option.key === 'ogp')
  ?.value as UndefinedOr<{ image?: string }>

const avatarImgSrc: UndefinedOr<string> = config.options?.find(
  (option) => option.key === 'avatarImgSrc'
)?.value as string

const socialLinks =
  config.options?.find((option) => option.key === 'socialLinks')?.value ??
  ([] as NavLink[])

const navigationLinks: NavLink[] = [
  { path: '/', display: 'Club' },
  ...((config.options?.find((option) => option.key === 'navigationLinks')
    ?.value as NavLink[]) ?? []),
]
const currentLink = navigationLinks?.find((link) =>
  ((pathname) => pathname === link.path)(`/${page ?? ''}`)
)
const footerLinks =
  (config.options?.find((option) => option.key === 'footerLinks')
    ?.value as UndefinedOr<NavLink[]>) ?? ([] as NavLink[])

const draftOptions = config?.options?.find((option) => option.key === '__draft')
  ?.value as DraftOptions['value']
const isInDraft = Boolean(draftOptions?.isInDraft)

const url = Astro.url.href.replace(/(.*)\/sites_\/\w*(.*)/i, '$1$2')

const backgroundColor = globalConfig?.bg ?? '#ADADAD'
---

<style define:vars={{ backgroundColor }}>
  html,
  body {
    background-color: var(--backgroundColor);
  }
</style>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg" href={avatarImgSrc || '/favicon.svg'} />
    <meta name="description" content={`${config.description}`} />
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:image" content={`${ogp?.image}`} />
    <meta property="og:description" content={config.description} />
    <meta property="og:site_name" content={config.name} />
    <meta name="twitter:site" content={config.twitterHandle} />
    <meta name="twitter:creator" content={config.twitterHandle} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={config.description} />
    <meta name="twitter:image" content={`${ogp?.image}`} />
  </head>

  <body class="min-h-screen overflow-x-hidden font-body text-white">
    <Header chainId={chainId} config={config} />
    <Hero
      image={homeConfig?.hero.image}
      avatar={avatarImgSrc}
      name={name}
      propertyAddress={propertyAddress}
      rpcUrl={rpcUrl}
      socialLinks={socialLinks}
      description={homeConfig?.description}
      globalConfig={globalConfig}
      compact={displayFullPage}
      isInDraft={isInDraft}
    />
    {
      displayFullPage ? (
        <hr class="my-16 opacity-30" />
      ) : (
        <div class="container relative mx-auto my-12 mb-5 max-w-7xl lg:my-20 lg:mb-16 xl:px-0">
          <Navigation links={navigationLinks} current={currentLink} />
        </div>
      )
    }
    <main class="container relative mx-auto max-w-4xl px-6 xl:px-0">
      <slot />
    </main>
    <footer
      class="container mx-auto grid max-w-7xl gap-4 py-24 px-4 lg:grid-cols-2"
    >
      <div>
        <a href="https://clubs.place"
          ><p
            class="flex items-center justify-center gap-2 text-xl font-bold lg:justify-start lg:text-2xl"
          >
            Build with <svg
              xmlns="http://www.w3.org/2000/svg"
              class="aspect-square h-[1em]"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zm10 0h2a2 2 0 002-2V6a2 2 0 00-2-2h-2a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z"
              ></path>
            </svg> Clubs
          </p></a
        >
        {
          footerLinks && (
            <section>
              <ul class="my-4 grid gap-2">
                {footerLinks.map((x) => (
                  <li>
                    <a href={x.path} class="text-sm opacity-80">
                      {x.display}
                    </a>
                  </li>
                ))}
              </ul>
            </section>
          )
        }
      </div>
      <div>
        <TokensInfo
          client:load
          propertyAddress={config.propertyAddress}
          chainId={config.chainId}
          rpcUrl={config.rpcUrl}
        />
      </div>
    </footer>
  </body>
</html>
