---
import AdminMembershipsAdditionForm from '@components/AdminMembershipsForm/AdminMembershipsAdditionForm.svelte'
import type { ClubsPropsAdminPages } from '@devprotocol/clubs-core'
import type { Membership } from '.'

const { membership, memberships, presets, clubs, rpcUrl, propertyAddress } =
  Astro.props as ClubsPropsAdminPages & {
    membership: Membership
    memberships: Membership[]
    presets: Membership[]
    rpcUrl: string
    propertyAddress: string
  }
---

<div>
  <h1 class="mb-16 font-title text-lg font-bold">Membership</h1>

  <AdminMembershipsAdditionForm
    client:only="svelte"
    currentPluginIndex={clubs.currentPluginIndex}
    membership={membership}
    presets={presets}
    existingMemberships={memberships}
    rpcUrl={rpcUrl}
    propertyAddress={propertyAddress}
  />
</div>

<input id="membershipOpts" type="hidden" value={JSON.stringify(memberships)} />
<input id="propertyAddress" type="hidden" value={propertyAddress} />

<script>
  import type { connection as Connection } from '@devprotocol/clubs-core/connection'
  import type { ethers } from 'ethers'
  import { controlModal, onMountClient } from '@devprotocol/clubs-core/events'
  import { ClubsEvents } from '@devprotocol/clubs-core'
  import type { Membership } from '@plugins/memberships'
  import { constants } from 'ethers'
  import { keccak256, parseUnits } from 'ethers/lib/utils'
  import BigNumber from 'bignumber.js'

  import { callSimpleCollections } from './utils/simpleCollections'

  let connection: typeof Connection
  let signer: ethers.Signer | undefined
  let currentAddress: string | undefined

  onMountClient(async () => {
    const _connection = await import('@devprotocol/clubs-core/connection')
    connection = _connection.connection
    connection().signer.subscribe((s) => {
      signer = s
    })
    connection().account.subscribe((a) => {
      currentAddress = a
    })
  })

  document.body.addEventListener(ClubsEvents.FinishConfiguration, async () => {
    const memOptsInput = document.getElementById(
      'membershipOpts'
    ) as HTMLInputElement
    const memOpts = JSON.parse(memOptsInput.value) as Membership[]

    const propertyAddressInput = document.getElementById(
      'propertyAddress'
    ) as HTMLInputElement
    const propAddress = propertyAddressInput.value as string

    if (!currentAddress || !signer) {
      return
    }

    const images = memOpts.map((opt) => ({
      src: opt.imageSrc,
      name: opt.name,
      description: opt.description,
      requiredETHAmount: parseUnits(String(opt.price)).toString(),
      requiredETHFee: opt.fee?.percentage
        ? parseUnits(
            new BigNumber(opt.price).times(opt.fee.percentage).toFixed()
          ).toString()
        : 0,
      gateway: opt.fee?.beneficiary ?? constants.AddressZero,
    }))

    const keys: string[] =
      memOpts?.map((opt) =>
        keccak256(
          // Uint8Array through JSON.stringify/JSON.parse is converted to a special object.
          // https://discord.com/channels/1060730242429358080/1060730242924281976/1073196956677054484
          new Uint8Array((opt.payload as unknown as { data: number[] }).data)
        )
      ) || []

    console.log({ keys, images, propAddress })

    controlModal({
      open: true,
      state: 'loading',
      blocks: true,
      closeButton: { label: 'Cancel' },
    })

    await callSimpleCollections(signer, 'setImages', [
      propAddress,
      images,
      keys,
    ]).then((res) => res.wait())

    controlModal({ open: false })
  })
</script>
